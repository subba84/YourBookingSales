//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SalesApplication
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SalesContainer : DbContext
    {
        public SalesContainer()
            : base("name=SalesContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActivityLog> ActivityLogs { get; set; }
        public virtual DbSet<CityMaster> CityMasters { get; set; }
        public virtual DbSet<CompanyLogin> CompanyLogins { get; set; }
        public virtual DbSet<Customerdetail> Customerdetails { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeInRole> EmployeeInRoles { get; set; }
        public virtual DbSet<Enquiry> Enquiries { get; set; }
        public virtual DbSet<HajAndUmrahPackage> HajAndUmrahPackages { get; set; }
        public virtual DbSet<HajCustomerdetail> HajCustomerdetails { get; set; }
        public virtual DbSet<HireCarByAmount> HireCarByAmounts { get; set; }
        public virtual DbSet<HireCarbyKM> HireCarbyKMs { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<Jobwork> Jobworks { get; set; }
        public virtual DbSet<JobWorkMonitor> JobWorkMonitors { get; set; }
        public virtual DbSet<NotificationHistory> NotificationHistories { get; set; }
        public virtual DbSet<PaymentHistory> PaymentHistories { get; set; }
        public virtual DbSet<RenewalHistory> RenewalHistories { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<SalesAudit> SalesAudits { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<SettingsMaster> SettingsMasters { get; set; }
        public virtual DbSet<SMSHistory> SMSHistories { get; set; }
        public virtual DbSet<SMSPricingMaster> SMSPricingMasters { get; set; }
        public virtual DbSet<StateMaster> StateMasters { get; set; }
        public virtual DbSet<tblbookticket> tblbooktickets { get; set; }
        public virtual DbSet<tblHirebusbykm> tblHirebusbykms { get; set; }
        public virtual DbSet<tblhirrerbu> tblhirrerbus { get; set; }
        public virtual DbSet<tblPackagebookingdomestic> tblPackagebookingdomestics { get; set; }
        public virtual DbSet<tblpackagebookinginternational> tblpackagebookinginternationals { get; set; }
        public virtual DbSet<TransactionAudit> TransactionAudits { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserRoleMap> UserRoleMaps { get; set; }
        public virtual DbSet<AirlinesMaster> AirlinesMasters { get; set; }
        public virtual DbSet<BookingModule> BookingModules { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<CompanyModuleAccess> CompanyModuleAccesses { get; set; }
        public virtual DbSet<ExpenseCategoryMaster> ExpenseCategoryMasters { get; set; }
        public virtual DbSet<ExpenseDetail> ExpenseDetails { get; set; }
        public virtual DbSet<InvoiceDetail> InvoiceDetails { get; set; }
        public virtual DbSet<UmrahAdvanceHistory> UmrahAdvanceHistories { get; set; }
        public virtual DbSet<UmrahCancellationMatrix> UmrahCancellationMatrices { get; set; }
        public virtual DbSet<UmrahCancellationPolicy> UmrahCancellationPolicies { get; set; }
        public virtual DbSet<UmrahCancellationPolicyHistory> UmrahCancellationPolicyHistories { get; set; }
        public virtual DbSet<UmrahGroup> UmrahGroups { get; set; }
        public virtual DbSet<UmrahPackage> UmrahPackages { get; set; }
        public virtual DbSet<UmrahPassenger> UmrahPassengers { get; set; }
        public virtual DbSet<UserModuleAccess> UserModuleAccesses { get; set; }
        public virtual DbSet<HajAndUmrahPackageTransactionAuditView> HajAndUmrahPackageTransactionAuditViews { get; set; }
        public virtual DbSet<PassportReport> PassportReports { get; set; }
        public virtual DbSet<RenewalHistoryView> RenewalHistoryViews { get; set; }
        public virtual DbSet<UmrahAdvanceReport> UmrahAdvanceReports { get; set; }
        public virtual DbSet<UmrahDojDobReport> UmrahDojDobReports { get; set; }
        public virtual DbSet<VWUmrahPackageDetail> VWUmrahPackageDetails { get; set; }
        public virtual DbSet<Error> Errors { get; set; }
        public virtual DbSet<SalesEntry> SalesEntries { get; set; }
        public virtual DbSet<InvoiceLineItem> InvoiceLineItems { get; set; }
        public virtual DbSet<MasterData> MasterDatas { get; set; }
    
        public virtual int cancelPackagedetails(Nullable<long> hireId, string flag, Nullable<decimal> refundAmount)
        {
            var hireIdParameter = hireId.HasValue ?
                new ObjectParameter("HireId", hireId) :
                new ObjectParameter("HireId", typeof(long));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var refundAmountParameter = refundAmount.HasValue ?
                new ObjectParameter("RefundAmount", refundAmount) :
                new ObjectParameter("RefundAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cancelPackagedetails", hireIdParameter, flagParameter, refundAmountParameter);
        }
    
        public virtual ObjectResult<GetActivityLogs_Result> GetActivityLogs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActivityLogs_Result>("GetActivityLogs");
        }
    
        public virtual ObjectResult<GetAirlines_Result> GetAirlines()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAirlines_Result>("GetAirlines");
        }
    
        public virtual ObjectResult<GetAllUsers_Result> GetAllUsers(Nullable<int> id, Nullable<int> companyId, Nullable<int> branchId, string emailId, string mobileNumber)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUsers_Result>("GetAllUsers", idParameter, companyIdParameter, branchIdParameter, emailIdParameter, mobileNumberParameter);
        }
    
        public virtual ObjectResult<GetAuthUser_Result> GetAuthUser(string mobileNumber, string password)
        {
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAuthUser_Result>("GetAuthUser", mobileNumberParameter, passwordParameter);
        }
    
        public virtual ObjectResult<GetBookingModules_Result> GetBookingModules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBookingModules_Result>("GetBookingModules");
        }
    
        public virtual ObjectResult<GetBranches_Result> GetBranches(Nullable<int> branchId, Nullable<int> companyId)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBranches_Result>("GetBranches", branchIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<GetBusHireByAmountReportSummary_Result> GetBusHireByAmountReportSummary(Nullable<long> companyID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string type)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(long));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBusHireByAmountReportSummary_Result>("GetBusHireByAmountReportSummary", companyIDParameter, fromdateParameter, todateParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetBusHireByKMReportSummary_Result> GetBusHireByKMReportSummary(Nullable<long> companyID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string type)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(long));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBusHireByKMReportSummary_Result>("GetBusHireByKMReportSummary", companyIDParameter, fromdateParameter, todateParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetCarhirebyamount_Result> GetCarhirebyamount(Nullable<long> id, Nullable<long> companyId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarhirebyamount_Result>("GetCarhirebyamount", idParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<GetCarHirebyamountForReport_Result> GetCarHirebyamountForReport(Nullable<long> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarHirebyamountForReport_Result>("GetCarHirebyamountForReport", companyidParameter);
        }
    
        public virtual ObjectResult<GetCarHireByAmountReportSummary_Result> GetCarHireByAmountReportSummary(Nullable<long> companyID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string type)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(long));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarHireByAmountReportSummary_Result>("GetCarHireByAmountReportSummary", companyIDParameter, fromdateParameter, todateParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetCarhirebyKM_Result> GetCarhirebyKM(Nullable<long> id, Nullable<long> companyId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarhirebyKM_Result>("GetCarhirebyKM", idParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<GetCarHirebykmForReport_Result> GetCarHirebykmForReport(Nullable<long> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarHirebykmForReport_Result>("GetCarHirebykmForReport", companyidParameter);
        }
    
        public virtual ObjectResult<GetCarHireByKMReportSummary_Result> GetCarHireByKMReportSummary(Nullable<long> companyID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string type)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(long));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarHireByKMReportSummary_Result>("GetCarHireByKMReportSummary", companyIDParameter, fromdateParameter, todateParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetCompanies_Result> GetCompanies(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanies_Result>("GetCompanies", companyIdParameter);
        }
    
        public virtual ObjectResult<getCompanyLogins_Result> getCompanyLogins(Nullable<long> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCompanyLogins_Result>("getCompanyLogins", companyIdParameter);
        }
    
        public virtual ObjectResult<GetCompanyModules_Result> GetCompanyModules(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyModules_Result>("GetCompanyModules", companyIdParameter);
        }
    
        public virtual ObjectResult<GetDepartureReport_Result> GetDepartureReport(Nullable<int> groupId, Nullable<System.DateTime> departureDate, Nullable<int> companyId, Nullable<int> branchId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var departureDateParameter = departureDate.HasValue ?
                new ObjectParameter("DepartureDate", departureDate) :
                new ObjectParameter("DepartureDate", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDepartureReport_Result>("GetDepartureReport", groupIdParameter, departureDateParameter, companyIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<GetDomesticReportSummary_Result> GetDomesticReportSummary(Nullable<long> companyID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string type)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(long));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDomesticReportSummary_Result>("GetDomesticReportSummary", companyIDParameter, fromdateParameter, todateParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetEnquiryForReport_Result> GetEnquiryForReport(Nullable<long> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEnquiryForReport_Result>("GetEnquiryForReport", companyidParameter);
        }
    
        public virtual ObjectResult<GetExpenseCategories_Result> GetExpenseCategories(string expenseType)
        {
            var expenseTypeParameter = expenseType != null ?
                new ObjectParameter("ExpenseType", expenseType) :
                new ObjectParameter("ExpenseType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExpenseCategories_Result>("GetExpenseCategories", expenseTypeParameter);
        }
    
        public virtual ObjectResult<GetExpenseDetails_Result> GetExpenseDetails(Nullable<int> id, Nullable<int> bookingRefId, Nullable<int> umrahGroupId, Nullable<int> companyId, Nullable<int> branchId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var bookingRefIdParameter = bookingRefId.HasValue ?
                new ObjectParameter("BookingRefId", bookingRefId) :
                new ObjectParameter("BookingRefId", typeof(int));
    
            var umrahGroupIdParameter = umrahGroupId.HasValue ?
                new ObjectParameter("UmrahGroupId", umrahGroupId) :
                new ObjectParameter("UmrahGroupId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExpenseDetails_Result>("GetExpenseDetails", idParameter, bookingRefIdParameter, umrahGroupIdParameter, companyIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<GetHajAndUmrahPackageById_Result> GetHajAndUmrahPackageById(Nullable<long> id, Nullable<long> companyId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHajAndUmrahPackageById_Result>("GetHajAndUmrahPackageById", idParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<GetHajCustomerdetailsByHajId_Result> GetHajCustomerdetailsByHajId(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHajCustomerdetailsByHajId_Result>("GetHajCustomerdetailsByHajId", idParameter);
        }
    
        public virtual ObjectResult<GetHajPackageForReport_Result> GetHajPackageForReport(Nullable<long> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHajPackageForReport_Result>("GetHajPackageForReport", companyIDParameter);
        }
    
        public virtual int GetHajPassengerDetails(Nullable<System.DateTime> fromDate, Nullable<long> companyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetHajPassengerDetails", fromDateParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetHajReportSummary_Result> GetHajReportSummary(Nullable<long> companyID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string type)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(long));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHajReportSummary_Result>("GetHajReportSummary", companyIDParameter, fromdateParameter, todateParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetHeader_Result> GetHeader(Nullable<long> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHeader_Result>("GetHeader", companyIdParameter);
        }
    
        public virtual ObjectResult<Gethirebyamount_Result> Gethirebyamount(Nullable<long> id, Nullable<long> companyId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Gethirebyamount_Result>("Gethirebyamount", idParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<GethirebyamountForReport_Result> GethirebyamountForReport(Nullable<long> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GethirebyamountForReport_Result>("GethirebyamountForReport", companyidParameter);
        }
    
        public virtual ObjectResult<Gethirebykm_Result> Gethirebykm(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Gethirebykm_Result>("Gethirebykm", idParameter);
        }
    
        public virtual ObjectResult<GethirebykmForReport_Result> GethirebykmForReport(Nullable<long> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GethirebykmForReport_Result>("GethirebykmForReport", companyidParameter);
        }
    
        public virtual ObjectResult<Gethirefullcancel_Result> Gethirefullcancel(Nullable<long> id, string flag, Nullable<long> companyId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Gethirefullcancel_Result>("Gethirefullcancel", idParameter, flagParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<Getids_Result> Getids(string flag)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Getids_Result>("Getids", flagParameter);
        }
    
        public virtual ObjectResult<GetInternationalReportSummary_Result> GetInternationalReportSummary(Nullable<long> companyID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string type)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(long));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInternationalReportSummary_Result>("GetInternationalReportSummary", companyIDParameter, fromdateParameter, todateParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetInvoiceDetails_Result> GetInvoiceDetails(Nullable<int> id, Nullable<int> bookingRefNo, Nullable<int> companyId, Nullable<int> branchId, string flag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var bookingRefNoParameter = bookingRefNo.HasValue ?
                new ObjectParameter("BookingRefNo", bookingRefNo) :
                new ObjectParameter("BookingRefNo", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoiceDetails_Result>("GetInvoiceDetails", idParameter, bookingRefNoParameter, companyIdParameter, branchIdParameter, flagParameter);
        }
    
        public virtual ObjectResult<GetNotificationHistory_Result> GetNotificationHistory(Nullable<int> companyId, string notificationType, string notificationCategory, Nullable<int> bookingRefNo)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var notificationTypeParameter = notificationType != null ?
                new ObjectParameter("NotificationType", notificationType) :
                new ObjectParameter("NotificationType", typeof(string));
    
            var notificationCategoryParameter = notificationCategory != null ?
                new ObjectParameter("NotificationCategory", notificationCategory) :
                new ObjectParameter("NotificationCategory", typeof(string));
    
            var bookingRefNoParameter = bookingRefNo.HasValue ?
                new ObjectParameter("BookingRefNo", bookingRefNo) :
                new ObjectParameter("BookingRefNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNotificationHistory_Result>("GetNotificationHistory", companyIdParameter, notificationTypeParameter, notificationCategoryParameter, bookingRefNoParameter);
        }
    
        public virtual ObjectResult<GetPackageDomesticForReport_Result> GetPackageDomesticForReport(Nullable<long> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPackageDomesticForReport_Result>("GetPackageDomesticForReport", companyidParameter);
        }
    
        public virtual ObjectResult<GetPackageInternationalForReport_Result> GetPackageInternationalForReport(Nullable<long> companyid)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("Companyid", companyid) :
                new ObjectParameter("Companyid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPackageInternationalForReport_Result>("GetPackageInternationalForReport", companyidParameter);
        }
    
        public virtual ObjectResult<GetPassportReport_Result> GetPassportReport(Nullable<int> groupId, string departureAirlines, Nullable<int> bookingRefNo, string passportNumber, string mobileNumber, Nullable<int> companyId, Nullable<int> branchId, string dateType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var departureAirlinesParameter = departureAirlines != null ?
                new ObjectParameter("DepartureAirlines", departureAirlines) :
                new ObjectParameter("DepartureAirlines", typeof(string));
    
            var bookingRefNoParameter = bookingRefNo.HasValue ?
                new ObjectParameter("BookingRefNo", bookingRefNo) :
                new ObjectParameter("BookingRefNo", typeof(int));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var dateTypeParameter = dateType != null ?
                new ObjectParameter("dateType", dateType) :
                new ObjectParameter("dateType", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPassportReport_Result>("GetPassportReport", groupIdParameter, departureAirlinesParameter, bookingRefNoParameter, passportNumberParameter, mobileNumberParameter, companyIdParameter, branchIdParameter, dateTypeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<getPassword_Result> getPassword(string mobilenumber)
        {
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("mobilenumber", mobilenumber) :
                new ObjectParameter("mobilenumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPassword_Result>("getPassword", mobilenumberParameter);
        }
    
        public virtual ObjectResult<GetSingleEnquiry_Result> GetSingleEnquiry(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSingleEnquiry_Result>("GetSingleEnquiry", idParameter);
        }
    
        public virtual ObjectResult<GetSMSPriceData_Result> GetSMSPriceData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSMSPriceData_Result>("GetSMSPriceData");
        }
    
        public virtual ObjectResult<GetSMSRecharge_Result> GetSMSRecharge(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSMSRecharge_Result>("GetSMSRecharge", companyIdParameter);
        }
    
        public virtual ObjectResult<GetTicketBooking_Result> GetTicketBooking(Nullable<long> id, Nullable<long> companyId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTicketBooking_Result>("GetTicketBooking", idParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<getticketcustlist_Result> getticketcustlist(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getticketcustlist_Result>("getticketcustlist", idParameter);
        }
    
        public virtual ObjectResult<GetTicketReportSummary_Result> GetTicketReportSummary(Nullable<long> companyID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string type)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(long));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTicketReportSummary_Result>("GetTicketReportSummary", companyIDParameter, fromdateParameter, todateParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetTicketsForReport_Result> GetTicketsForReport(Nullable<long> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTicketsForReport_Result>("GetTicketsForReport", companyIDParameter);
        }
    
        public virtual ObjectResult<GetTransactionAudit_Result> GetTransactionAudit(Nullable<long> id, Nullable<long> companyId, string type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactionAudit_Result>("GetTransactionAudit", idParameter, companyIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetTransactionAuditReport_Result> GetTransactionAuditReport(Nullable<long> companyID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string type)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(long));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactionAuditReport_Result>("GetTransactionAuditReport", companyIDParameter, fromdateParameter, todateParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetUmrahAdvanceHistory_Result> GetUmrahAdvanceHistory(Nullable<int> umrahPackageId, Nullable<int> companyId, Nullable<int> branchId, string paymentMode, Nullable<System.DateTime> createdOn)
        {
            var umrahPackageIdParameter = umrahPackageId.HasValue ?
                new ObjectParameter("UmrahPackageId", umrahPackageId) :
                new ObjectParameter("UmrahPackageId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUmrahAdvanceHistory_Result>("GetUmrahAdvanceHistory", umrahPackageIdParameter, companyIdParameter, branchIdParameter, paymentModeParameter, createdOnParameter);
        }
    
        public virtual ObjectResult<GetUmrahAdvanceReport_Result> GetUmrahAdvanceReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string reportType, Nullable<int> groupId, Nullable<int> companyId, Nullable<int> branchId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUmrahAdvanceReport_Result>("GetUmrahAdvanceReport", fromDateParameter, toDateParameter, reportTypeParameter, groupIdParameter, companyIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<GetUmrahCancellationMatrix_Result> GetUmrahCancellationMatrix(Nullable<int> id, Nullable<int> umrahCancellationPolicyId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var umrahCancellationPolicyIdParameter = umrahCancellationPolicyId.HasValue ?
                new ObjectParameter("UmrahCancellationPolicyId", umrahCancellationPolicyId) :
                new ObjectParameter("UmrahCancellationPolicyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUmrahCancellationMatrix_Result>("GetUmrahCancellationMatrix", idParameter, umrahCancellationPolicyIdParameter);
        }
    
        public virtual ObjectResult<GetUmrahCancellationPolicies_Result> GetUmrahCancellationPolicies(Nullable<int> id, Nullable<int> groupId, Nullable<int> companyId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUmrahCancellationPolicies_Result>("GetUmrahCancellationPolicies", idParameter, groupIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<GetUmrahCancellationPolicyHistory_Result> GetUmrahCancellationPolicyHistory(Nullable<int> id, Nullable<int> umrahCancellationPolicyId, Nullable<int> umrahCancellationMatrixId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var umrahCancellationPolicyIdParameter = umrahCancellationPolicyId.HasValue ?
                new ObjectParameter("UmrahCancellationPolicyId", umrahCancellationPolicyId) :
                new ObjectParameter("UmrahCancellationPolicyId", typeof(int));
    
            var umrahCancellationMatrixIdParameter = umrahCancellationMatrixId.HasValue ?
                new ObjectParameter("UmrahCancellationMatrixId", umrahCancellationMatrixId) :
                new ObjectParameter("UmrahCancellationMatrixId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUmrahCancellationPolicyHistory_Result>("GetUmrahCancellationPolicyHistory", idParameter, umrahCancellationPolicyIdParameter, umrahCancellationMatrixIdParameter);
        }
    
        public virtual ObjectResult<GetUmrahDojDobReport_Result> GetUmrahDojDobReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string reportType, Nullable<int> groupId, Nullable<int> companyId, Nullable<int> branchId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUmrahDojDobReport_Result>("GetUmrahDojDobReport", fromDateParameter, toDateParameter, reportTypeParameter, groupIdParameter, companyIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<GetUmrahGroupDetails_Result> GetUmrahGroupDetails(Nullable<int> id, Nullable<int> companyId, Nullable<int> branchId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUmrahGroupDetails_Result>("GetUmrahGroupDetails", idParameter, companyIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<GetUmrahGroupsbasedonMonth_Result> GetUmrahGroupsbasedonMonth(Nullable<int> departuremonth, Nullable<int> returnmonth, Nullable<int> companyId, Nullable<int> branchId)
        {
            var departuremonthParameter = departuremonth.HasValue ?
                new ObjectParameter("departuremonth", departuremonth) :
                new ObjectParameter("departuremonth", typeof(int));
    
            var returnmonthParameter = returnmonth.HasValue ?
                new ObjectParameter("returnmonth", returnmonth) :
                new ObjectParameter("returnmonth", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUmrahGroupsbasedonMonth_Result>("GetUmrahGroupsbasedonMonth", departuremonthParameter, returnmonthParameter, companyIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<GetUmrahPackageDetails_Result> GetUmrahPackageDetails(Nullable<int> id, Nullable<int> groupId, Nullable<int> companyId, Nullable<int> branchId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUmrahPackageDetails_Result>("GetUmrahPackageDetails", idParameter, groupIdParameter, companyIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<GetUmrahPackageDetailsforSearch_Result> GetUmrahPackageDetailsforSearch(Nullable<int> id, Nullable<int> groupId, Nullable<int> companyId, Nullable<int> branchId, string mobileNumber, string passportNumber)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUmrahPackageDetailsforSearch_Result>("GetUmrahPackageDetailsforSearch", idParameter, groupIdParameter, companyIdParameter, branchIdParameter, mobileNumberParameter, passportNumberParameter);
        }
    
        public virtual ObjectResult<GetUmrahPackageMonthWiseReport_Result> GetUmrahPackageMonthWiseReport(Nullable<int> year, Nullable<int> month, Nullable<int> groupId, string departureAirlines, string maccaHotelName, string madeenaHotelName, Nullable<int> companyId, Nullable<int> branchId)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var departureAirlinesParameter = departureAirlines != null ?
                new ObjectParameter("DepartureAirlines", departureAirlines) :
                new ObjectParameter("DepartureAirlines", typeof(string));
    
            var maccaHotelNameParameter = maccaHotelName != null ?
                new ObjectParameter("MaccaHotelName", maccaHotelName) :
                new ObjectParameter("MaccaHotelName", typeof(string));
    
            var madeenaHotelNameParameter = madeenaHotelName != null ?
                new ObjectParameter("MadeenaHotelName", madeenaHotelName) :
                new ObjectParameter("MadeenaHotelName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUmrahPackageMonthWiseReport_Result>("GetUmrahPackageMonthWiseReport", yearParameter, monthParameter, groupIdParameter, departureAirlinesParameter, maccaHotelNameParameter, madeenaHotelNameParameter, companyIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<GetUmrahPackageReport_Result> GetUmrahPackageReport(Nullable<int> groupId, Nullable<int> startMonth, Nullable<int> endMonth, Nullable<int> id, Nullable<int> companyId, Nullable<int> branchId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var startMonthParameter = startMonth.HasValue ?
                new ObjectParameter("StartMonth", startMonth) :
                new ObjectParameter("StartMonth", typeof(int));
    
            var endMonthParameter = endMonth.HasValue ?
                new ObjectParameter("EndMonth", endMonth) :
                new ObjectParameter("EndMonth", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUmrahPackageReport_Result>("GetUmrahPackageReport", groupIdParameter, startMonthParameter, endMonthParameter, idParameter, companyIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<GetUmrahPassengers_Result> GetUmrahPassengers(Nullable<int> umrahId)
        {
            var umrahIdParameter = umrahId.HasValue ?
                new ObjectParameter("UmrahId", umrahId) :
                new ObjectParameter("UmrahId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUmrahPassengers_Result>("GetUmrahPassengers", umrahIdParameter);
        }
    
        public virtual ObjectResult<getuserByCompanyId_Result> getuserByCompanyId(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getuserByCompanyId_Result>("getuserByCompanyId", idParameter);
        }
    
        public virtual ObjectResult<GetUserModuleAccess_Result> GetUserModuleAccess(Nullable<int> userId, Nullable<int> branchId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserModuleAccess_Result>("GetUserModuleAccess", userIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<GetUserRoles_Result> GetUserRoles(Nullable<int> userId, Nullable<int> roleId, Nullable<int> companyId, Nullable<int> branchId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserRoles_Result>("GetUserRoles", userIdParameter, roleIdParameter, companyIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<getusers_Result> getusers(string mobilenumber, string password)
        {
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("mobilenumber", mobilenumber) :
                new ObjectParameter("mobilenumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getusers_Result>("getusers", mobilenumberParameter, passwordParameter);
        }
    
        public virtual int InsertransactionAudit(Nullable<int> id, string transactionType, Nullable<decimal> amountPaid, Nullable<long> recordId, Nullable<long> companyId, string createdBy, string modifiedBy, Nullable<bool> status, string bookingStatus, string customerName, Nullable<decimal> totalAmount, string paymentMode, string bankName, string transactionId, Nullable<decimal> balance)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var amountPaidParameter = amountPaid.HasValue ?
                new ObjectParameter("AmountPaid", amountPaid) :
                new ObjectParameter("AmountPaid", typeof(decimal));
    
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("RecordId", recordId) :
                new ObjectParameter("RecordId", typeof(long));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            var bookingStatusParameter = bookingStatus != null ?
                new ObjectParameter("BookingStatus", bookingStatus) :
                new ObjectParameter("BookingStatus", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertransactionAudit", idParameter, transactionTypeParameter, amountPaidParameter, recordIdParameter, companyIdParameter, createdByParameter, modifiedByParameter, statusParameter, bookingStatusParameter, customerNameParameter, totalAmountParameter, paymentModeParameter, bankNameParameter, transactionIdParameter, balanceParameter);
        }
    
        public virtual ObjectResult<Packagebookingdetails_Result> Packagebookingdetails(Nullable<long> id, string flag, Nullable<long> companyId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Packagebookingdetails_Result>("Packagebookingdetails", idParameter, flagParameter, companyIdParameter);
        }
    
        public virtual int UpdateCarHireAmountandKM(Nullable<long> hireId, string flag, Nullable<decimal> refundAmount)
        {
            var hireIdParameter = hireId.HasValue ?
                new ObjectParameter("HireId", hireId) :
                new ObjectParameter("HireId", typeof(long));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var refundAmountParameter = refundAmount.HasValue ?
                new ObjectParameter("RefundAmount", refundAmount) :
                new ObjectParameter("RefundAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCarHireAmountandKM", hireIdParameter, flagParameter, refundAmountParameter);
        }
    
        public virtual int UpdateHajCustomerdetails(Nullable<long> hajId)
        {
            var hajIdParameter = hajId.HasValue ?
                new ObjectParameter("HajId", hajId) :
                new ObjectParameter("HajId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateHajCustomerdetails", hajIdParameter);
        }
    
        public virtual int UpdateHajPackage(Nullable<long> id, Nullable<decimal> refundAmount)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var refundAmountParameter = refundAmount.HasValue ?
                new ObjectParameter("RefundAmount", refundAmount) :
                new ObjectParameter("RefundAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateHajPackage", idParameter, refundAmountParameter);
        }
    
        public virtual int Updatehireamountandkm(Nullable<long> hireId, string flag, Nullable<decimal> refundAmount)
        {
            var hireIdParameter = hireId.HasValue ?
                new ObjectParameter("HireId", hireId) :
                new ObjectParameter("HireId", typeof(long));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var refundAmountParameter = refundAmount.HasValue ?
                new ObjectParameter("RefundAmount", refundAmount) :
                new ObjectParameter("RefundAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Updatehireamountandkm", hireIdParameter, flagParameter, refundAmountParameter);
        }
    
        public virtual int Updatepartialticketcancel(Nullable<long> id, Nullable<decimal> refundAmount, string seatnumber, string cancelseats)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var refundAmountParameter = refundAmount.HasValue ?
                new ObjectParameter("RefundAmount", refundAmount) :
                new ObjectParameter("RefundAmount", typeof(decimal));
    
            var seatnumberParameter = seatnumber != null ?
                new ObjectParameter("Seatnumber", seatnumber) :
                new ObjectParameter("Seatnumber", typeof(string));
    
            var cancelseatsParameter = cancelseats != null ?
                new ObjectParameter("cancelseats", cancelseats) :
                new ObjectParameter("cancelseats", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Updatepartialticketcancel", idParameter, refundAmountParameter, seatnumberParameter, cancelseatsParameter);
        }
    
        public virtual int UpdatePassword(string mobileNumber, string oldPassword, string newPassword)
        {
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("OldPassword", oldPassword) :
                new ObjectParameter("OldPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePassword", mobileNumberParameter, oldPasswordParameter, newPasswordParameter);
        }
    
        public virtual int updateSMSCount(string mobilenumber, Nullable<int> smsCount)
        {
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("mobilenumber", mobilenumber) :
                new ObjectParameter("mobilenumber", typeof(string));
    
            var smsCountParameter = smsCount.HasValue ?
                new ObjectParameter("SmsCount", smsCount) :
                new ObjectParameter("SmsCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateSMSCount", mobilenumberParameter, smsCountParameter);
        }
    
        public virtual int USP_DeleteHajUmrahPackage(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteHajUmrahPackage", idParameter);
        }
    
        public virtual ObjectResult<USP_GetHajPackagedata_Result> USP_GetHajPackagedata(Nullable<long> id, Nullable<int> days, string flag, Nullable<long> companyid)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetHajPackagedata_Result>("USP_GetHajPackagedata", idParameter, daysParameter, flagParameter, companyidParameter);
        }
    
        public virtual ObjectResult<USP_Gethirebusorkmdata_Result> USP_Gethirebusorkmdata(Nullable<long> id, Nullable<int> days, string amountorkm, string flag, Nullable<long> companyId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            var amountorkmParameter = amountorkm != null ?
                new ObjectParameter("amountorkm", amountorkm) :
                new ObjectParameter("amountorkm", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Gethirebusorkmdata_Result>("USP_Gethirebusorkmdata", idParameter, daysParameter, amountorkmParameter, flagParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<USP_GethireCarorkmdata_Result> USP_GethireCarorkmdata(Nullable<long> id, Nullable<int> days, string amountorkm, string flag, Nullable<long> companyId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            var amountorkmParameter = amountorkm != null ?
                new ObjectParameter("amountorkm", amountorkm) :
                new ObjectParameter("amountorkm", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GethireCarorkmdata_Result>("USP_GethireCarorkmdata", idParameter, daysParameter, amountorkmParameter, flagParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<USP_GetPackagedata_Result> USP_GetPackagedata(Nullable<long> id, Nullable<int> days, string searchPackage, string flag, Nullable<long> companyId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            var searchPackageParameter = searchPackage != null ?
                new ObjectParameter("SearchPackage", searchPackage) :
                new ObjectParameter("SearchPackage", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetPackagedata_Result>("USP_GetPackagedata", idParameter, daysParameter, searchPackageParameter, flagParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<USP_Gettblbookticketdata_Result> USP_Gettblbookticketdata(Nullable<long> id, Nullable<int> days, string flag, Nullable<long> companyid)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Gettblbookticketdata_Result>("USP_Gettblbookticketdata", idParameter, daysParameter, flagParameter, companyidParameter);
        }
    
        public virtual int USP_insertCompanyLogin(Nullable<long> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_insertCompanyLogin", companyIdParameter);
        }
    
        public virtual int USP_insertCustomerdetails(Nullable<long> id, Nullable<long> userId, string customerName, Nullable<int> age, string gender, string mobilenumber, string createdBy, string modifiedBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifieddate, Nullable<bool> activeinactive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("Mobilenumber", mobilenumber) :
                new ObjectParameter("Mobilenumber", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            var activeinactiveParameter = activeinactive.HasValue ?
                new ObjectParameter("Activeinactive", activeinactive) :
                new ObjectParameter("Activeinactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_insertCustomerdetails", idParameter, userIdParameter, customerNameParameter, ageParameter, genderParameter, mobilenumberParameter, createdByParameter, modifiedByParameter, createdDateParameter, modifieddateParameter, activeinactiveParameter);
        }
    
        public virtual int USP_InsertHajAndUmrahPackage(Nullable<long> iD, Nullable<long> companyId, string address, Nullable<System.DateTime> startingdate, Nullable<System.DateTime> endingdate, string sightseeingby, Nullable<long> noofadults, Nullable<long> noofchildren, string hotelrequired, string hotel, string hoteltype, string roomtype, Nullable<long> noofrooms, string stayInMacca, string stayInMadina, string placesOfVisit, string subAgentName, string subAgentNumber, string packageparticulars, Nullable<decimal> amountforadults, Nullable<decimal> amountforchildren, Nullable<decimal> amount, Nullable<decimal> gST, Nullable<decimal> servicecharge, Nullable<decimal> advance, Nullable<decimal> balance, string createdBy, Nullable<System.DateTime> createdDate, string modifiedBy, string remarks, Nullable<decimal> total, Nullable<long> noofInfants, Nullable<decimal> amountforInfants, string aadharNumber, string pANNumber, string hotelNameInMacca, string roomNumberInMacca, string hotelNameInMadina, string outDateofMacca, string roomNumberInMadina, string inDateofMadina, string paymentMode, string bankName, Nullable<decimal> tCS, string departureAirlinesName, string departureFlightName, string departureTime, string departureReporting, string returnAirlinesName, string returnFlightName, string returnTime, string returnReporting, string transactionId, Nullable<decimal> currentAdvance, Nullable<int> branchId, string branchName, ObjectParameter optID, ObjectParameter msg)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var startingdateParameter = startingdate.HasValue ?
                new ObjectParameter("Startingdate", startingdate) :
                new ObjectParameter("Startingdate", typeof(System.DateTime));
    
            var endingdateParameter = endingdate.HasValue ?
                new ObjectParameter("Endingdate", endingdate) :
                new ObjectParameter("Endingdate", typeof(System.DateTime));
    
            var sightseeingbyParameter = sightseeingby != null ?
                new ObjectParameter("Sightseeingby", sightseeingby) :
                new ObjectParameter("Sightseeingby", typeof(string));
    
            var noofadultsParameter = noofadults.HasValue ?
                new ObjectParameter("Noofadults", noofadults) :
                new ObjectParameter("Noofadults", typeof(long));
    
            var noofchildrenParameter = noofchildren.HasValue ?
                new ObjectParameter("Noofchildren", noofchildren) :
                new ObjectParameter("Noofchildren", typeof(long));
    
            var hotelrequiredParameter = hotelrequired != null ?
                new ObjectParameter("Hotelrequired", hotelrequired) :
                new ObjectParameter("Hotelrequired", typeof(string));
    
            var hotelParameter = hotel != null ?
                new ObjectParameter("Hotel", hotel) :
                new ObjectParameter("Hotel", typeof(string));
    
            var hoteltypeParameter = hoteltype != null ?
                new ObjectParameter("Hoteltype", hoteltype) :
                new ObjectParameter("Hoteltype", typeof(string));
    
            var roomtypeParameter = roomtype != null ?
                new ObjectParameter("Roomtype", roomtype) :
                new ObjectParameter("Roomtype", typeof(string));
    
            var noofroomsParameter = noofrooms.HasValue ?
                new ObjectParameter("Noofrooms", noofrooms) :
                new ObjectParameter("Noofrooms", typeof(long));
    
            var stayInMaccaParameter = stayInMacca != null ?
                new ObjectParameter("StayInMacca", stayInMacca) :
                new ObjectParameter("StayInMacca", typeof(string));
    
            var stayInMadinaParameter = stayInMadina != null ?
                new ObjectParameter("StayInMadina", stayInMadina) :
                new ObjectParameter("StayInMadina", typeof(string));
    
            var placesOfVisitParameter = placesOfVisit != null ?
                new ObjectParameter("PlacesOfVisit", placesOfVisit) :
                new ObjectParameter("PlacesOfVisit", typeof(string));
    
            var subAgentNameParameter = subAgentName != null ?
                new ObjectParameter("SubAgentName", subAgentName) :
                new ObjectParameter("SubAgentName", typeof(string));
    
            var subAgentNumberParameter = subAgentNumber != null ?
                new ObjectParameter("SubAgentNumber", subAgentNumber) :
                new ObjectParameter("SubAgentNumber", typeof(string));
    
            var packageparticularsParameter = packageparticulars != null ?
                new ObjectParameter("Packageparticulars", packageparticulars) :
                new ObjectParameter("Packageparticulars", typeof(string));
    
            var amountforadultsParameter = amountforadults.HasValue ?
                new ObjectParameter("Amountforadults", amountforadults) :
                new ObjectParameter("Amountforadults", typeof(decimal));
    
            var amountforchildrenParameter = amountforchildren.HasValue ?
                new ObjectParameter("Amountforchildren", amountforchildren) :
                new ObjectParameter("Amountforchildren", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var gSTParameter = gST.HasValue ?
                new ObjectParameter("GST", gST) :
                new ObjectParameter("GST", typeof(decimal));
    
            var servicechargeParameter = servicecharge.HasValue ?
                new ObjectParameter("Servicecharge", servicecharge) :
                new ObjectParameter("Servicecharge", typeof(decimal));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("Advance", advance) :
                new ObjectParameter("Advance", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var noofInfantsParameter = noofInfants.HasValue ?
                new ObjectParameter("NoofInfants", noofInfants) :
                new ObjectParameter("NoofInfants", typeof(long));
    
            var amountforInfantsParameter = amountforInfants.HasValue ?
                new ObjectParameter("AmountforInfants", amountforInfants) :
                new ObjectParameter("AmountforInfants", typeof(decimal));
    
            var aadharNumberParameter = aadharNumber != null ?
                new ObjectParameter("AadharNumber", aadharNumber) :
                new ObjectParameter("AadharNumber", typeof(string));
    
            var pANNumberParameter = pANNumber != null ?
                new ObjectParameter("PANNumber", pANNumber) :
                new ObjectParameter("PANNumber", typeof(string));
    
            var hotelNameInMaccaParameter = hotelNameInMacca != null ?
                new ObjectParameter("HotelNameInMacca", hotelNameInMacca) :
                new ObjectParameter("HotelNameInMacca", typeof(string));
    
            var roomNumberInMaccaParameter = roomNumberInMacca != null ?
                new ObjectParameter("RoomNumberInMacca", roomNumberInMacca) :
                new ObjectParameter("RoomNumberInMacca", typeof(string));
    
            var hotelNameInMadinaParameter = hotelNameInMadina != null ?
                new ObjectParameter("HotelNameInMadina", hotelNameInMadina) :
                new ObjectParameter("HotelNameInMadina", typeof(string));
    
            var outDateofMaccaParameter = outDateofMacca != null ?
                new ObjectParameter("OutDateofMacca", outDateofMacca) :
                new ObjectParameter("OutDateofMacca", typeof(string));
    
            var roomNumberInMadinaParameter = roomNumberInMadina != null ?
                new ObjectParameter("RoomNumberInMadina", roomNumberInMadina) :
                new ObjectParameter("RoomNumberInMadina", typeof(string));
    
            var inDateofMadinaParameter = inDateofMadina != null ?
                new ObjectParameter("InDateofMadina", inDateofMadina) :
                new ObjectParameter("InDateofMadina", typeof(string));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var tCSParameter = tCS.HasValue ?
                new ObjectParameter("TCS", tCS) :
                new ObjectParameter("TCS", typeof(decimal));
    
            var departureAirlinesNameParameter = departureAirlinesName != null ?
                new ObjectParameter("DepartureAirlinesName", departureAirlinesName) :
                new ObjectParameter("DepartureAirlinesName", typeof(string));
    
            var departureFlightNameParameter = departureFlightName != null ?
                new ObjectParameter("DepartureFlightName", departureFlightName) :
                new ObjectParameter("DepartureFlightName", typeof(string));
    
            var departureTimeParameter = departureTime != null ?
                new ObjectParameter("DepartureTime", departureTime) :
                new ObjectParameter("DepartureTime", typeof(string));
    
            var departureReportingParameter = departureReporting != null ?
                new ObjectParameter("DepartureReporting", departureReporting) :
                new ObjectParameter("DepartureReporting", typeof(string));
    
            var returnAirlinesNameParameter = returnAirlinesName != null ?
                new ObjectParameter("ReturnAirlinesName", returnAirlinesName) :
                new ObjectParameter("ReturnAirlinesName", typeof(string));
    
            var returnFlightNameParameter = returnFlightName != null ?
                new ObjectParameter("ReturnFlightName", returnFlightName) :
                new ObjectParameter("ReturnFlightName", typeof(string));
    
            var returnTimeParameter = returnTime != null ?
                new ObjectParameter("ReturnTime", returnTime) :
                new ObjectParameter("ReturnTime", typeof(string));
    
            var returnReportingParameter = returnReporting != null ?
                new ObjectParameter("ReturnReporting", returnReporting) :
                new ObjectParameter("ReturnReporting", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var currentAdvanceParameter = currentAdvance.HasValue ?
                new ObjectParameter("CurrentAdvance", currentAdvance) :
                new ObjectParameter("CurrentAdvance", typeof(decimal));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InsertHajAndUmrahPackage", iDParameter, companyIdParameter, addressParameter, startingdateParameter, endingdateParameter, sightseeingbyParameter, noofadultsParameter, noofchildrenParameter, hotelrequiredParameter, hotelParameter, hoteltypeParameter, roomtypeParameter, noofroomsParameter, stayInMaccaParameter, stayInMadinaParameter, placesOfVisitParameter, subAgentNameParameter, subAgentNumberParameter, packageparticularsParameter, amountforadultsParameter, amountforchildrenParameter, amountParameter, gSTParameter, servicechargeParameter, advanceParameter, balanceParameter, createdByParameter, createdDateParameter, modifiedByParameter, remarksParameter, totalParameter, noofInfantsParameter, amountforInfantsParameter, aadharNumberParameter, pANNumberParameter, hotelNameInMaccaParameter, roomNumberInMaccaParameter, hotelNameInMadinaParameter, outDateofMaccaParameter, roomNumberInMadinaParameter, inDateofMadinaParameter, paymentModeParameter, bankNameParameter, tCSParameter, departureAirlinesNameParameter, departureFlightNameParameter, departureTimeParameter, departureReportingParameter, returnAirlinesNameParameter, returnFlightNameParameter, returnTimeParameter, returnReportingParameter, transactionIdParameter, currentAdvanceParameter, branchIdParameter, branchNameParameter, optID, msg);
        }
    
        public virtual int USP_insertHajCustomerdetails(Nullable<long> id, Nullable<long> hajId, string givenName, string surName, string dOB, string gender, string passportNumber, string passportIssueDate, string passportExpiryDate, string mobilenumber, string createdBy, string modifiedBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifieddate, Nullable<bool> activeinactive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var hajIdParameter = hajId.HasValue ?
                new ObjectParameter("HajId", hajId) :
                new ObjectParameter("HajId", typeof(long));
    
            var givenNameParameter = givenName != null ?
                new ObjectParameter("GivenName", givenName) :
                new ObjectParameter("GivenName", typeof(string));
    
            var surNameParameter = surName != null ?
                new ObjectParameter("SurName", surName) :
                new ObjectParameter("SurName", typeof(string));
    
            var dOBParameter = dOB != null ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var passportIssueDateParameter = passportIssueDate != null ?
                new ObjectParameter("PassportIssueDate", passportIssueDate) :
                new ObjectParameter("PassportIssueDate", typeof(string));
    
            var passportExpiryDateParameter = passportExpiryDate != null ?
                new ObjectParameter("PassportExpiryDate", passportExpiryDate) :
                new ObjectParameter("PassportExpiryDate", typeof(string));
    
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("Mobilenumber", mobilenumber) :
                new ObjectParameter("Mobilenumber", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            var activeinactiveParameter = activeinactive.HasValue ?
                new ObjectParameter("Activeinactive", activeinactive) :
                new ObjectParameter("Activeinactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_insertHajCustomerdetails", idParameter, hajIdParameter, givenNameParameter, surNameParameter, dOBParameter, genderParameter, passportNumberParameter, passportIssueDateParameter, passportExpiryDateParameter, mobilenumberParameter, createdByParameter, modifiedByParameter, createdDateParameter, modifieddateParameter, activeinactiveParameter);
        }
    
        public virtual int USP_insertsettings(Nullable<long> companyId, string description, string createdBy, string modifiedBy, string type)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_insertsettings", companyIdParameter, descriptionParameter, createdByParameter, modifiedByParameter, typeParameter);
        }
    
        public virtual int USP_insertupdateCarhire(Nullable<long> hirerID, Nullable<long> companyid, string nameofhirer, Nullable<System.DateTime> bookingdate, string address, string partysphnno, string particularsofjourney, string startingfrom, string goingto, string startingtime, Nullable<System.DateTime> startingdate, string endingtime, Nullable<System.DateTime> endingdate, string vehicle, string vehicletype, Nullable<long> noofvehicles, string vehiclenumber, Nullable<long> seatingcapacity, Nullable<decimal> hireamount, Nullable<decimal> roadtax, Nullable<decimal> advance, Nullable<decimal> driversbhattaperday, Nullable<decimal> balance, Nullable<decimal> waitingcharges, string per, string remarks, string createdBy, string modifiedBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, Nullable<bool> status, Nullable<long> startingMeterReading, Nullable<long> endingMeterReading, Nullable<decimal> tollTax, Nullable<decimal> parkingCharges, string driverName, Nullable<int> noOfDrivers, Nullable<decimal> gST, Nullable<long> noOfKM, Nullable<decimal> totalAmount, string startingMinutes, string endingminutes, string driverPhNumber, Nullable<decimal> extraCharges, ObjectParameter optID, ObjectParameter msg)
        {
            var hirerIDParameter = hirerID.HasValue ?
                new ObjectParameter("HirerID", hirerID) :
                new ObjectParameter("HirerID", typeof(long));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(long));
    
            var nameofhirerParameter = nameofhirer != null ?
                new ObjectParameter("Nameofhirer", nameofhirer) :
                new ObjectParameter("Nameofhirer", typeof(string));
    
            var bookingdateParameter = bookingdate.HasValue ?
                new ObjectParameter("Bookingdate", bookingdate) :
                new ObjectParameter("Bookingdate", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var partysphnnoParameter = partysphnno != null ?
                new ObjectParameter("Partysphnno", partysphnno) :
                new ObjectParameter("Partysphnno", typeof(string));
    
            var particularsofjourneyParameter = particularsofjourney != null ?
                new ObjectParameter("Particularsofjourney", particularsofjourney) :
                new ObjectParameter("Particularsofjourney", typeof(string));
    
            var startingfromParameter = startingfrom != null ?
                new ObjectParameter("Startingfrom", startingfrom) :
                new ObjectParameter("Startingfrom", typeof(string));
    
            var goingtoParameter = goingto != null ?
                new ObjectParameter("Goingto", goingto) :
                new ObjectParameter("Goingto", typeof(string));
    
            var startingtimeParameter = startingtime != null ?
                new ObjectParameter("Startingtime", startingtime) :
                new ObjectParameter("Startingtime", typeof(string));
    
            var startingdateParameter = startingdate.HasValue ?
                new ObjectParameter("Startingdate", startingdate) :
                new ObjectParameter("Startingdate", typeof(System.DateTime));
    
            var endingtimeParameter = endingtime != null ?
                new ObjectParameter("Endingtime", endingtime) :
                new ObjectParameter("Endingtime", typeof(string));
    
            var endingdateParameter = endingdate.HasValue ?
                new ObjectParameter("Endingdate", endingdate) :
                new ObjectParameter("Endingdate", typeof(System.DateTime));
    
            var vehicleParameter = vehicle != null ?
                new ObjectParameter("Vehicle", vehicle) :
                new ObjectParameter("Vehicle", typeof(string));
    
            var vehicletypeParameter = vehicletype != null ?
                new ObjectParameter("Vehicletype", vehicletype) :
                new ObjectParameter("Vehicletype", typeof(string));
    
            var noofvehiclesParameter = noofvehicles.HasValue ?
                new ObjectParameter("Noofvehicles", noofvehicles) :
                new ObjectParameter("Noofvehicles", typeof(long));
    
            var vehiclenumberParameter = vehiclenumber != null ?
                new ObjectParameter("Vehiclenumber", vehiclenumber) :
                new ObjectParameter("Vehiclenumber", typeof(string));
    
            var seatingcapacityParameter = seatingcapacity.HasValue ?
                new ObjectParameter("Seatingcapacity", seatingcapacity) :
                new ObjectParameter("Seatingcapacity", typeof(long));
    
            var hireamountParameter = hireamount.HasValue ?
                new ObjectParameter("Hireamount", hireamount) :
                new ObjectParameter("Hireamount", typeof(decimal));
    
            var roadtaxParameter = roadtax.HasValue ?
                new ObjectParameter("Roadtax", roadtax) :
                new ObjectParameter("Roadtax", typeof(decimal));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("Advance", advance) :
                new ObjectParameter("Advance", typeof(decimal));
    
            var driversbhattaperdayParameter = driversbhattaperday.HasValue ?
                new ObjectParameter("Driversbhattaperday", driversbhattaperday) :
                new ObjectParameter("Driversbhattaperday", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var waitingchargesParameter = waitingcharges.HasValue ?
                new ObjectParameter("Waitingcharges", waitingcharges) :
                new ObjectParameter("Waitingcharges", typeof(decimal));
    
            var perParameter = per != null ?
                new ObjectParameter("Per", per) :
                new ObjectParameter("Per", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var startingMeterReadingParameter = startingMeterReading.HasValue ?
                new ObjectParameter("StartingMeterReading", startingMeterReading) :
                new ObjectParameter("StartingMeterReading", typeof(long));
    
            var endingMeterReadingParameter = endingMeterReading.HasValue ?
                new ObjectParameter("EndingMeterReading", endingMeterReading) :
                new ObjectParameter("EndingMeterReading", typeof(long));
    
            var tollTaxParameter = tollTax.HasValue ?
                new ObjectParameter("TollTax", tollTax) :
                new ObjectParameter("TollTax", typeof(decimal));
    
            var parkingChargesParameter = parkingCharges.HasValue ?
                new ObjectParameter("ParkingCharges", parkingCharges) :
                new ObjectParameter("ParkingCharges", typeof(decimal));
    
            var driverNameParameter = driverName != null ?
                new ObjectParameter("DriverName", driverName) :
                new ObjectParameter("DriverName", typeof(string));
    
            var noOfDriversParameter = noOfDrivers.HasValue ?
                new ObjectParameter("NoOfDrivers", noOfDrivers) :
                new ObjectParameter("NoOfDrivers", typeof(int));
    
            var gSTParameter = gST.HasValue ?
                new ObjectParameter("GST", gST) :
                new ObjectParameter("GST", typeof(decimal));
    
            var noOfKMParameter = noOfKM.HasValue ?
                new ObjectParameter("NoOfKM", noOfKM) :
                new ObjectParameter("NoOfKM", typeof(long));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var startingMinutesParameter = startingMinutes != null ?
                new ObjectParameter("StartingMinutes", startingMinutes) :
                new ObjectParameter("StartingMinutes", typeof(string));
    
            var endingminutesParameter = endingminutes != null ?
                new ObjectParameter("Endingminutes", endingminutes) :
                new ObjectParameter("Endingminutes", typeof(string));
    
            var driverPhNumberParameter = driverPhNumber != null ?
                new ObjectParameter("DriverPhNumber", driverPhNumber) :
                new ObjectParameter("DriverPhNumber", typeof(string));
    
            var extraChargesParameter = extraCharges.HasValue ?
                new ObjectParameter("ExtraCharges", extraCharges) :
                new ObjectParameter("ExtraCharges", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_insertupdateCarhire", hirerIDParameter, companyidParameter, nameofhirerParameter, bookingdateParameter, addressParameter, partysphnnoParameter, particularsofjourneyParameter, startingfromParameter, goingtoParameter, startingtimeParameter, startingdateParameter, endingtimeParameter, endingdateParameter, vehicleParameter, vehicletypeParameter, noofvehiclesParameter, vehiclenumberParameter, seatingcapacityParameter, hireamountParameter, roadtaxParameter, advanceParameter, driversbhattaperdayParameter, balanceParameter, waitingchargesParameter, perParameter, remarksParameter, createdByParameter, modifiedByParameter, createdDateParameter, modifiedDateParameter, statusParameter, startingMeterReadingParameter, endingMeterReadingParameter, tollTaxParameter, parkingChargesParameter, driverNameParameter, noOfDriversParameter, gSTParameter, noOfKMParameter, totalAmountParameter, startingMinutesParameter, endingminutesParameter, driverPhNumberParameter, extraChargesParameter, optID, msg);
        }
    
        public virtual int USP_insertupdateCarhireByKM(Nullable<long> hirerID, Nullable<long> companyid, string nameofhirer, Nullable<System.DateTime> bookingdate, string address, string partysphnno, string particularsofjourney, string startingfrom, string goingto, string startingtime, Nullable<System.DateTime> startingdate, string endingtime, Nullable<System.DateTime> endingdate, string vehicle, string vehicletype, Nullable<long> noofvehicles, string vehiclenumber, Nullable<long> seatingcapacity, Nullable<decimal> hireamount, Nullable<decimal> roadtax, Nullable<decimal> advance, Nullable<decimal> driversbhattaperday, Nullable<decimal> balance, Nullable<decimal> waitingcharges, string per, string remarks, string createdBy, string modifiedBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, Nullable<bool> status, Nullable<long> startingMeterReading, Nullable<long> endingMeterReading, Nullable<decimal> tollTax, Nullable<decimal> parkingCharges, string driverName, Nullable<int> noOfDrivers, Nullable<decimal> gST, Nullable<long> noOfKM, Nullable<decimal> totalAmount, Nullable<decimal> noofHours, Nullable<decimal> extraCharges, string carBookBy, Nullable<decimal> price, string startingMinutes, string endingminutes, string driverPhNumber, ObjectParameter optID, ObjectParameter msg)
        {
            var hirerIDParameter = hirerID.HasValue ?
                new ObjectParameter("HirerID", hirerID) :
                new ObjectParameter("HirerID", typeof(long));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(long));
    
            var nameofhirerParameter = nameofhirer != null ?
                new ObjectParameter("Nameofhirer", nameofhirer) :
                new ObjectParameter("Nameofhirer", typeof(string));
    
            var bookingdateParameter = bookingdate.HasValue ?
                new ObjectParameter("Bookingdate", bookingdate) :
                new ObjectParameter("Bookingdate", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var partysphnnoParameter = partysphnno != null ?
                new ObjectParameter("Partysphnno", partysphnno) :
                new ObjectParameter("Partysphnno", typeof(string));
    
            var particularsofjourneyParameter = particularsofjourney != null ?
                new ObjectParameter("Particularsofjourney", particularsofjourney) :
                new ObjectParameter("Particularsofjourney", typeof(string));
    
            var startingfromParameter = startingfrom != null ?
                new ObjectParameter("Startingfrom", startingfrom) :
                new ObjectParameter("Startingfrom", typeof(string));
    
            var goingtoParameter = goingto != null ?
                new ObjectParameter("Goingto", goingto) :
                new ObjectParameter("Goingto", typeof(string));
    
            var startingtimeParameter = startingtime != null ?
                new ObjectParameter("Startingtime", startingtime) :
                new ObjectParameter("Startingtime", typeof(string));
    
            var startingdateParameter = startingdate.HasValue ?
                new ObjectParameter("Startingdate", startingdate) :
                new ObjectParameter("Startingdate", typeof(System.DateTime));
    
            var endingtimeParameter = endingtime != null ?
                new ObjectParameter("Endingtime", endingtime) :
                new ObjectParameter("Endingtime", typeof(string));
    
            var endingdateParameter = endingdate.HasValue ?
                new ObjectParameter("Endingdate", endingdate) :
                new ObjectParameter("Endingdate", typeof(System.DateTime));
    
            var vehicleParameter = vehicle != null ?
                new ObjectParameter("Vehicle", vehicle) :
                new ObjectParameter("Vehicle", typeof(string));
    
            var vehicletypeParameter = vehicletype != null ?
                new ObjectParameter("Vehicletype", vehicletype) :
                new ObjectParameter("Vehicletype", typeof(string));
    
            var noofvehiclesParameter = noofvehicles.HasValue ?
                new ObjectParameter("Noofvehicles", noofvehicles) :
                new ObjectParameter("Noofvehicles", typeof(long));
    
            var vehiclenumberParameter = vehiclenumber != null ?
                new ObjectParameter("Vehiclenumber", vehiclenumber) :
                new ObjectParameter("Vehiclenumber", typeof(string));
    
            var seatingcapacityParameter = seatingcapacity.HasValue ?
                new ObjectParameter("Seatingcapacity", seatingcapacity) :
                new ObjectParameter("Seatingcapacity", typeof(long));
    
            var hireamountParameter = hireamount.HasValue ?
                new ObjectParameter("Hireamount", hireamount) :
                new ObjectParameter("Hireamount", typeof(decimal));
    
            var roadtaxParameter = roadtax.HasValue ?
                new ObjectParameter("Roadtax", roadtax) :
                new ObjectParameter("Roadtax", typeof(decimal));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("Advance", advance) :
                new ObjectParameter("Advance", typeof(decimal));
    
            var driversbhattaperdayParameter = driversbhattaperday.HasValue ?
                new ObjectParameter("Driversbhattaperday", driversbhattaperday) :
                new ObjectParameter("Driversbhattaperday", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var waitingchargesParameter = waitingcharges.HasValue ?
                new ObjectParameter("Waitingcharges", waitingcharges) :
                new ObjectParameter("Waitingcharges", typeof(decimal));
    
            var perParameter = per != null ?
                new ObjectParameter("Per", per) :
                new ObjectParameter("Per", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var startingMeterReadingParameter = startingMeterReading.HasValue ?
                new ObjectParameter("StartingMeterReading", startingMeterReading) :
                new ObjectParameter("StartingMeterReading", typeof(long));
    
            var endingMeterReadingParameter = endingMeterReading.HasValue ?
                new ObjectParameter("EndingMeterReading", endingMeterReading) :
                new ObjectParameter("EndingMeterReading", typeof(long));
    
            var tollTaxParameter = tollTax.HasValue ?
                new ObjectParameter("TollTax", tollTax) :
                new ObjectParameter("TollTax", typeof(decimal));
    
            var parkingChargesParameter = parkingCharges.HasValue ?
                new ObjectParameter("ParkingCharges", parkingCharges) :
                new ObjectParameter("ParkingCharges", typeof(decimal));
    
            var driverNameParameter = driverName != null ?
                new ObjectParameter("DriverName", driverName) :
                new ObjectParameter("DriverName", typeof(string));
    
            var noOfDriversParameter = noOfDrivers.HasValue ?
                new ObjectParameter("NoOfDrivers", noOfDrivers) :
                new ObjectParameter("NoOfDrivers", typeof(int));
    
            var gSTParameter = gST.HasValue ?
                new ObjectParameter("GST", gST) :
                new ObjectParameter("GST", typeof(decimal));
    
            var noOfKMParameter = noOfKM.HasValue ?
                new ObjectParameter("NoOfKM", noOfKM) :
                new ObjectParameter("NoOfKM", typeof(long));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var noofHoursParameter = noofHours.HasValue ?
                new ObjectParameter("NoofHours", noofHours) :
                new ObjectParameter("NoofHours", typeof(decimal));
    
            var extraChargesParameter = extraCharges.HasValue ?
                new ObjectParameter("ExtraCharges", extraCharges) :
                new ObjectParameter("ExtraCharges", typeof(decimal));
    
            var carBookByParameter = carBookBy != null ?
                new ObjectParameter("CarBookBy", carBookBy) :
                new ObjectParameter("CarBookBy", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var startingMinutesParameter = startingMinutes != null ?
                new ObjectParameter("StartingMinutes", startingMinutes) :
                new ObjectParameter("StartingMinutes", typeof(string));
    
            var endingminutesParameter = endingminutes != null ?
                new ObjectParameter("Endingminutes", endingminutes) :
                new ObjectParameter("Endingminutes", typeof(string));
    
            var driverPhNumberParameter = driverPhNumber != null ?
                new ObjectParameter("DriverPhNumber", driverPhNumber) :
                new ObjectParameter("DriverPhNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_insertupdateCarhireByKM", hirerIDParameter, companyidParameter, nameofhirerParameter, bookingdateParameter, addressParameter, partysphnnoParameter, particularsofjourneyParameter, startingfromParameter, goingtoParameter, startingtimeParameter, startingdateParameter, endingtimeParameter, endingdateParameter, vehicleParameter, vehicletypeParameter, noofvehiclesParameter, vehiclenumberParameter, seatingcapacityParameter, hireamountParameter, roadtaxParameter, advanceParameter, driversbhattaperdayParameter, balanceParameter, waitingchargesParameter, perParameter, remarksParameter, createdByParameter, modifiedByParameter, createdDateParameter, modifiedDateParameter, statusParameter, startingMeterReadingParameter, endingMeterReadingParameter, tollTaxParameter, parkingChargesParameter, driverNameParameter, noOfDriversParameter, gSTParameter, noOfKMParameter, totalAmountParameter, noofHoursParameter, extraChargesParameter, carBookByParameter, priceParameter, startingMinutesParameter, endingminutesParameter, driverPhNumberParameter, optID, msg);
        }
    
        public virtual int USP_insertupdateEnquiry(Nullable<long> iD, Nullable<long> companyid, string customerName, string mobileNumber, string enquiryAbout, string noofVehicles, string vehicleType, string fromLocation, string toLocation, string estimatedAmount, string address, string remarks, Nullable<System.DateTime> enquiryDate, Nullable<System.DateTime> dOJ, string createdBy, string modifiedBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, Nullable<bool> status, ObjectParameter optID, ObjectParameter msg)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(long));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var enquiryAboutParameter = enquiryAbout != null ?
                new ObjectParameter("EnquiryAbout", enquiryAbout) :
                new ObjectParameter("EnquiryAbout", typeof(string));
    
            var noofVehiclesParameter = noofVehicles != null ?
                new ObjectParameter("NoofVehicles", noofVehicles) :
                new ObjectParameter("NoofVehicles", typeof(string));
    
            var vehicleTypeParameter = vehicleType != null ?
                new ObjectParameter("VehicleType", vehicleType) :
                new ObjectParameter("VehicleType", typeof(string));
    
            var fromLocationParameter = fromLocation != null ?
                new ObjectParameter("FromLocation", fromLocation) :
                new ObjectParameter("FromLocation", typeof(string));
    
            var toLocationParameter = toLocation != null ?
                new ObjectParameter("ToLocation", toLocation) :
                new ObjectParameter("ToLocation", typeof(string));
    
            var estimatedAmountParameter = estimatedAmount != null ?
                new ObjectParameter("EstimatedAmount", estimatedAmount) :
                new ObjectParameter("EstimatedAmount", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var enquiryDateParameter = enquiryDate.HasValue ?
                new ObjectParameter("EnquiryDate", enquiryDate) :
                new ObjectParameter("EnquiryDate", typeof(System.DateTime));
    
            var dOJParameter = dOJ.HasValue ?
                new ObjectParameter("DOJ", dOJ) :
                new ObjectParameter("DOJ", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_insertupdateEnquiry", iDParameter, companyidParameter, customerNameParameter, mobileNumberParameter, enquiryAboutParameter, noofVehiclesParameter, vehicleTypeParameter, fromLocationParameter, toLocationParameter, estimatedAmountParameter, addressParameter, remarksParameter, enquiryDateParameter, dOJParameter, createdByParameter, modifiedByParameter, createdDateParameter, modifiedDateParameter, statusParameter, optID, msg);
        }
    
        public virtual int USP_insertupdatehirebusbooking(Nullable<long> hirerID, Nullable<long> companyid, string nameofhirer, Nullable<System.DateTime> bookingdate, string address, string partysphnno, string particularsofjourney, string startingfrom, string goingto, string startingtime, Nullable<System.DateTime> startingdate, string endingtime, Nullable<System.DateTime> endingdate, string vehicle, string vehicletype, Nullable<long> noofvehicles, string vehiclenumber, Nullable<long> seatingcapacity, Nullable<decimal> hireamount, Nullable<decimal> roadtax, Nullable<decimal> advance, Nullable<decimal> driversbhattaperday, Nullable<decimal> balance, Nullable<decimal> waitingcharges, string per, string remarks, string createdBy, string modifiedBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, Nullable<bool> status, Nullable<int> noofDrivers, Nullable<decimal> gST, string startingMinutes, string endingMinutes, Nullable<decimal> totalAmount, Nullable<decimal> extraCharges, ObjectParameter optID, ObjectParameter msg)
        {
            var hirerIDParameter = hirerID.HasValue ?
                new ObjectParameter("HirerID", hirerID) :
                new ObjectParameter("HirerID", typeof(long));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(long));
    
            var nameofhirerParameter = nameofhirer != null ?
                new ObjectParameter("Nameofhirer", nameofhirer) :
                new ObjectParameter("Nameofhirer", typeof(string));
    
            var bookingdateParameter = bookingdate.HasValue ?
                new ObjectParameter("Bookingdate", bookingdate) :
                new ObjectParameter("Bookingdate", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var partysphnnoParameter = partysphnno != null ?
                new ObjectParameter("Partysphnno", partysphnno) :
                new ObjectParameter("Partysphnno", typeof(string));
    
            var particularsofjourneyParameter = particularsofjourney != null ?
                new ObjectParameter("Particularsofjourney", particularsofjourney) :
                new ObjectParameter("Particularsofjourney", typeof(string));
    
            var startingfromParameter = startingfrom != null ?
                new ObjectParameter("Startingfrom", startingfrom) :
                new ObjectParameter("Startingfrom", typeof(string));
    
            var goingtoParameter = goingto != null ?
                new ObjectParameter("Goingto", goingto) :
                new ObjectParameter("Goingto", typeof(string));
    
            var startingtimeParameter = startingtime != null ?
                new ObjectParameter("Startingtime", startingtime) :
                new ObjectParameter("Startingtime", typeof(string));
    
            var startingdateParameter = startingdate.HasValue ?
                new ObjectParameter("Startingdate", startingdate) :
                new ObjectParameter("Startingdate", typeof(System.DateTime));
    
            var endingtimeParameter = endingtime != null ?
                new ObjectParameter("Endingtime", endingtime) :
                new ObjectParameter("Endingtime", typeof(string));
    
            var endingdateParameter = endingdate.HasValue ?
                new ObjectParameter("Endingdate", endingdate) :
                new ObjectParameter("Endingdate", typeof(System.DateTime));
    
            var vehicleParameter = vehicle != null ?
                new ObjectParameter("Vehicle", vehicle) :
                new ObjectParameter("Vehicle", typeof(string));
    
            var vehicletypeParameter = vehicletype != null ?
                new ObjectParameter("Vehicletype", vehicletype) :
                new ObjectParameter("Vehicletype", typeof(string));
    
            var noofvehiclesParameter = noofvehicles.HasValue ?
                new ObjectParameter("Noofvehicles", noofvehicles) :
                new ObjectParameter("Noofvehicles", typeof(long));
    
            var vehiclenumberParameter = vehiclenumber != null ?
                new ObjectParameter("Vehiclenumber", vehiclenumber) :
                new ObjectParameter("Vehiclenumber", typeof(string));
    
            var seatingcapacityParameter = seatingcapacity.HasValue ?
                new ObjectParameter("Seatingcapacity", seatingcapacity) :
                new ObjectParameter("Seatingcapacity", typeof(long));
    
            var hireamountParameter = hireamount.HasValue ?
                new ObjectParameter("Hireamount", hireamount) :
                new ObjectParameter("Hireamount", typeof(decimal));
    
            var roadtaxParameter = roadtax.HasValue ?
                new ObjectParameter("Roadtax", roadtax) :
                new ObjectParameter("Roadtax", typeof(decimal));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("Advance", advance) :
                new ObjectParameter("Advance", typeof(decimal));
    
            var driversbhattaperdayParameter = driversbhattaperday.HasValue ?
                new ObjectParameter("Driversbhattaperday", driversbhattaperday) :
                new ObjectParameter("Driversbhattaperday", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var waitingchargesParameter = waitingcharges.HasValue ?
                new ObjectParameter("Waitingcharges", waitingcharges) :
                new ObjectParameter("Waitingcharges", typeof(decimal));
    
            var perParameter = per != null ?
                new ObjectParameter("Per", per) :
                new ObjectParameter("Per", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var noofDriversParameter = noofDrivers.HasValue ?
                new ObjectParameter("noofDrivers", noofDrivers) :
                new ObjectParameter("noofDrivers", typeof(int));
    
            var gSTParameter = gST.HasValue ?
                new ObjectParameter("GST", gST) :
                new ObjectParameter("GST", typeof(decimal));
    
            var startingMinutesParameter = startingMinutes != null ?
                new ObjectParameter("StartingMinutes", startingMinutes) :
                new ObjectParameter("StartingMinutes", typeof(string));
    
            var endingMinutesParameter = endingMinutes != null ?
                new ObjectParameter("EndingMinutes", endingMinutes) :
                new ObjectParameter("EndingMinutes", typeof(string));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var extraChargesParameter = extraCharges.HasValue ?
                new ObjectParameter("ExtraCharges", extraCharges) :
                new ObjectParameter("ExtraCharges", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_insertupdatehirebusbooking", hirerIDParameter, companyidParameter, nameofhirerParameter, bookingdateParameter, addressParameter, partysphnnoParameter, particularsofjourneyParameter, startingfromParameter, goingtoParameter, startingtimeParameter, startingdateParameter, endingtimeParameter, endingdateParameter, vehicleParameter, vehicletypeParameter, noofvehiclesParameter, vehiclenumberParameter, seatingcapacityParameter, hireamountParameter, roadtaxParameter, advanceParameter, driversbhattaperdayParameter, balanceParameter, waitingchargesParameter, perParameter, remarksParameter, createdByParameter, modifiedByParameter, createdDateParameter, modifiedDateParameter, statusParameter, noofDriversParameter, gSTParameter, startingMinutesParameter, endingMinutesParameter, totalAmountParameter, extraChargesParameter, optID, msg);
        }
    
        public virtual int USP_insertupdateHirebusbykm(Nullable<long> hirebusbykmID, Nullable<long> companyId, string nameofhirer, Nullable<System.DateTime> bookingdate, string address, string partyphonumbers, string particularsofjourney, string startingfrom, string goingto, string startingtime, Nullable<System.DateTime> startingdate, string endingtime, Nullable<System.DateTime> endingdate, string vehicle, string vehicletype, Nullable<long> noofvehicles, string vehiclenumbers, Nullable<long> seetingcapacity, Nullable<decimal> roadtax, Nullable<decimal> noofkm, Nullable<decimal> priceperkm, Nullable<decimal> hireamount, Nullable<decimal> advance, Nullable<decimal> driverperday, Nullable<decimal> balance, Nullable<decimal> waitingcharges, string per, string remarks, string createdBy, string modifiedBy, Nullable<bool> status, Nullable<int> noOfDrivers, Nullable<decimal> gST, string startingMinutes, string endingMinutes, Nullable<decimal> totalAmount, Nullable<decimal> extraCharges, ObjectParameter optID, ObjectParameter msg)
        {
            var hirebusbykmIDParameter = hirebusbykmID.HasValue ?
                new ObjectParameter("HirebusbykmID", hirebusbykmID) :
                new ObjectParameter("HirebusbykmID", typeof(long));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var nameofhirerParameter = nameofhirer != null ?
                new ObjectParameter("Nameofhirer", nameofhirer) :
                new ObjectParameter("Nameofhirer", typeof(string));
    
            var bookingdateParameter = bookingdate.HasValue ?
                new ObjectParameter("Bookingdate", bookingdate) :
                new ObjectParameter("Bookingdate", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var partyphonumbersParameter = partyphonumbers != null ?
                new ObjectParameter("Partyphonumbers", partyphonumbers) :
                new ObjectParameter("Partyphonumbers", typeof(string));
    
            var particularsofjourneyParameter = particularsofjourney != null ?
                new ObjectParameter("Particularsofjourney", particularsofjourney) :
                new ObjectParameter("Particularsofjourney", typeof(string));
    
            var startingfromParameter = startingfrom != null ?
                new ObjectParameter("Startingfrom", startingfrom) :
                new ObjectParameter("Startingfrom", typeof(string));
    
            var goingtoParameter = goingto != null ?
                new ObjectParameter("Goingto", goingto) :
                new ObjectParameter("Goingto", typeof(string));
    
            var startingtimeParameter = startingtime != null ?
                new ObjectParameter("Startingtime", startingtime) :
                new ObjectParameter("Startingtime", typeof(string));
    
            var startingdateParameter = startingdate.HasValue ?
                new ObjectParameter("Startingdate", startingdate) :
                new ObjectParameter("Startingdate", typeof(System.DateTime));
    
            var endingtimeParameter = endingtime != null ?
                new ObjectParameter("Endingtime", endingtime) :
                new ObjectParameter("Endingtime", typeof(string));
    
            var endingdateParameter = endingdate.HasValue ?
                new ObjectParameter("Endingdate", endingdate) :
                new ObjectParameter("Endingdate", typeof(System.DateTime));
    
            var vehicleParameter = vehicle != null ?
                new ObjectParameter("Vehicle", vehicle) :
                new ObjectParameter("Vehicle", typeof(string));
    
            var vehicletypeParameter = vehicletype != null ?
                new ObjectParameter("Vehicletype", vehicletype) :
                new ObjectParameter("Vehicletype", typeof(string));
    
            var noofvehiclesParameter = noofvehicles.HasValue ?
                new ObjectParameter("Noofvehicles", noofvehicles) :
                new ObjectParameter("Noofvehicles", typeof(long));
    
            var vehiclenumbersParameter = vehiclenumbers != null ?
                new ObjectParameter("Vehiclenumbers", vehiclenumbers) :
                new ObjectParameter("Vehiclenumbers", typeof(string));
    
            var seetingcapacityParameter = seetingcapacity.HasValue ?
                new ObjectParameter("Seetingcapacity", seetingcapacity) :
                new ObjectParameter("Seetingcapacity", typeof(long));
    
            var roadtaxParameter = roadtax.HasValue ?
                new ObjectParameter("Roadtax", roadtax) :
                new ObjectParameter("Roadtax", typeof(decimal));
    
            var noofkmParameter = noofkm.HasValue ?
                new ObjectParameter("Noofkm", noofkm) :
                new ObjectParameter("Noofkm", typeof(decimal));
    
            var priceperkmParameter = priceperkm.HasValue ?
                new ObjectParameter("Priceperkm", priceperkm) :
                new ObjectParameter("Priceperkm", typeof(decimal));
    
            var hireamountParameter = hireamount.HasValue ?
                new ObjectParameter("Hireamount", hireamount) :
                new ObjectParameter("Hireamount", typeof(decimal));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("Advance", advance) :
                new ObjectParameter("Advance", typeof(decimal));
    
            var driverperdayParameter = driverperday.HasValue ?
                new ObjectParameter("Driverperday", driverperday) :
                new ObjectParameter("Driverperday", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var waitingchargesParameter = waitingcharges.HasValue ?
                new ObjectParameter("Waitingcharges", waitingcharges) :
                new ObjectParameter("Waitingcharges", typeof(decimal));
    
            var perParameter = per != null ?
                new ObjectParameter("Per", per) :
                new ObjectParameter("Per", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var noOfDriversParameter = noOfDrivers.HasValue ?
                new ObjectParameter("NoOfDrivers", noOfDrivers) :
                new ObjectParameter("NoOfDrivers", typeof(int));
    
            var gSTParameter = gST.HasValue ?
                new ObjectParameter("GST", gST) :
                new ObjectParameter("GST", typeof(decimal));
    
            var startingMinutesParameter = startingMinutes != null ?
                new ObjectParameter("StartingMinutes", startingMinutes) :
                new ObjectParameter("StartingMinutes", typeof(string));
    
            var endingMinutesParameter = endingMinutes != null ?
                new ObjectParameter("EndingMinutes", endingMinutes) :
                new ObjectParameter("EndingMinutes", typeof(string));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var extraChargesParameter = extraCharges.HasValue ?
                new ObjectParameter("ExtraCharges", extraCharges) :
                new ObjectParameter("ExtraCharges", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_insertupdateHirebusbykm", hirebusbykmIDParameter, companyIdParameter, nameofhirerParameter, bookingdateParameter, addressParameter, partyphonumbersParameter, particularsofjourneyParameter, startingfromParameter, goingtoParameter, startingtimeParameter, startingdateParameter, endingtimeParameter, endingdateParameter, vehicleParameter, vehicletypeParameter, noofvehiclesParameter, vehiclenumbersParameter, seetingcapacityParameter, roadtaxParameter, noofkmParameter, priceperkmParameter, hireamountParameter, advanceParameter, driverperdayParameter, balanceParameter, waitingchargesParameter, perParameter, remarksParameter, createdByParameter, modifiedByParameter, statusParameter, noOfDriversParameter, gSTParameter, startingMinutesParameter, endingMinutesParameter, totalAmountParameter, extraChargesParameter, optID, msg);
        }
    
        public virtual int USP_insertupdatehirrerbooking(Nullable<long> hirerID, Nullable<long> companyid, string nameofhirer, Nullable<System.DateTime> bookingdate, string address, string partysphnno, string particularsofjourney, string startingfrom, string goingto, string startingtime, Nullable<System.DateTime> startingdate, string endingtime, Nullable<System.DateTime> endingdate, string vehicle, string vehicletype, Nullable<long> noofvehicles, string vehiclenumber, Nullable<long> seatingcapacity, Nullable<decimal> hireamount, Nullable<decimal> roadtax, Nullable<decimal> advance, Nullable<decimal> driversbhattaperday, Nullable<decimal> balance, Nullable<decimal> waitingcharges, string per, string remarks, string createdBy, string modifiedBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate, Nullable<bool> status, ObjectParameter optID, ObjectParameter msg)
        {
            var hirerIDParameter = hirerID.HasValue ?
                new ObjectParameter("HirerID", hirerID) :
                new ObjectParameter("HirerID", typeof(long));
    
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(long));
    
            var nameofhirerParameter = nameofhirer != null ?
                new ObjectParameter("Nameofhirer", nameofhirer) :
                new ObjectParameter("Nameofhirer", typeof(string));
    
            var bookingdateParameter = bookingdate.HasValue ?
                new ObjectParameter("Bookingdate", bookingdate) :
                new ObjectParameter("Bookingdate", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var partysphnnoParameter = partysphnno != null ?
                new ObjectParameter("Partysphnno", partysphnno) :
                new ObjectParameter("Partysphnno", typeof(string));
    
            var particularsofjourneyParameter = particularsofjourney != null ?
                new ObjectParameter("Particularsofjourney", particularsofjourney) :
                new ObjectParameter("Particularsofjourney", typeof(string));
    
            var startingfromParameter = startingfrom != null ?
                new ObjectParameter("Startingfrom", startingfrom) :
                new ObjectParameter("Startingfrom", typeof(string));
    
            var goingtoParameter = goingto != null ?
                new ObjectParameter("Goingto", goingto) :
                new ObjectParameter("Goingto", typeof(string));
    
            var startingtimeParameter = startingtime != null ?
                new ObjectParameter("Startingtime", startingtime) :
                new ObjectParameter("Startingtime", typeof(string));
    
            var startingdateParameter = startingdate.HasValue ?
                new ObjectParameter("Startingdate", startingdate) :
                new ObjectParameter("Startingdate", typeof(System.DateTime));
    
            var endingtimeParameter = endingtime != null ?
                new ObjectParameter("Endingtime", endingtime) :
                new ObjectParameter("Endingtime", typeof(string));
    
            var endingdateParameter = endingdate.HasValue ?
                new ObjectParameter("Endingdate", endingdate) :
                new ObjectParameter("Endingdate", typeof(System.DateTime));
    
            var vehicleParameter = vehicle != null ?
                new ObjectParameter("Vehicle", vehicle) :
                new ObjectParameter("Vehicle", typeof(string));
    
            var vehicletypeParameter = vehicletype != null ?
                new ObjectParameter("Vehicletype", vehicletype) :
                new ObjectParameter("Vehicletype", typeof(string));
    
            var noofvehiclesParameter = noofvehicles.HasValue ?
                new ObjectParameter("Noofvehicles", noofvehicles) :
                new ObjectParameter("Noofvehicles", typeof(long));
    
            var vehiclenumberParameter = vehiclenumber != null ?
                new ObjectParameter("Vehiclenumber", vehiclenumber) :
                new ObjectParameter("Vehiclenumber", typeof(string));
    
            var seatingcapacityParameter = seatingcapacity.HasValue ?
                new ObjectParameter("Seatingcapacity", seatingcapacity) :
                new ObjectParameter("Seatingcapacity", typeof(long));
    
            var hireamountParameter = hireamount.HasValue ?
                new ObjectParameter("Hireamount", hireamount) :
                new ObjectParameter("Hireamount", typeof(decimal));
    
            var roadtaxParameter = roadtax.HasValue ?
                new ObjectParameter("Roadtax", roadtax) :
                new ObjectParameter("Roadtax", typeof(decimal));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("Advance", advance) :
                new ObjectParameter("Advance", typeof(decimal));
    
            var driversbhattaperdayParameter = driversbhattaperday.HasValue ?
                new ObjectParameter("Driversbhattaperday", driversbhattaperday) :
                new ObjectParameter("Driversbhattaperday", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var waitingchargesParameter = waitingcharges.HasValue ?
                new ObjectParameter("Waitingcharges", waitingcharges) :
                new ObjectParameter("Waitingcharges", typeof(decimal));
    
            var perParameter = per != null ?
                new ObjectParameter("Per", per) :
                new ObjectParameter("Per", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_insertupdatehirrerbooking", hirerIDParameter, companyidParameter, nameofhirerParameter, bookingdateParameter, addressParameter, partysphnnoParameter, particularsofjourneyParameter, startingfromParameter, goingtoParameter, startingtimeParameter, startingdateParameter, endingtimeParameter, endingdateParameter, vehicleParameter, vehicletypeParameter, noofvehiclesParameter, vehiclenumberParameter, seatingcapacityParameter, hireamountParameter, roadtaxParameter, advanceParameter, driversbhattaperdayParameter, balanceParameter, waitingchargesParameter, perParameter, remarksParameter, createdByParameter, modifiedByParameter, createdDateParameter, modifiedDateParameter, statusParameter, optID, msg);
        }
    
        public virtual int USP_insertupdatesettings(string areatype, string description, Nullable<long> companyId)
        {
            var areatypeParameter = areatype != null ?
                new ObjectParameter("areatype", areatype) :
                new ObjectParameter("areatype", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_insertupdatesettings", areatypeParameter, descriptionParameter, companyIdParameter);
        }
    
        public virtual int USP_insertupdateticketbooking(Nullable<long> iD, Nullable<long> companyID, string fromlocation, string tolocation, Nullable<System.DateTime> dateofjourney, string mobilenumber, string emailid, string departuretime, string arrivaltime, string busnumber, string seatnumber, string bustype, Nullable<decimal> ticketfare, Nullable<decimal> gST, Nullable<decimal> servicechqarge, Nullable<decimal> totalfare, string operatorname, string operatorcntno, string boardingpoint, string createdBy, string modifiedBy, Nullable<bool> status, string operaterPNR, Nullable<decimal> commissionToAgent, ObjectParameter optID, ObjectParameter msg)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(long));
    
            var fromlocationParameter = fromlocation != null ?
                new ObjectParameter("Fromlocation", fromlocation) :
                new ObjectParameter("Fromlocation", typeof(string));
    
            var tolocationParameter = tolocation != null ?
                new ObjectParameter("Tolocation", tolocation) :
                new ObjectParameter("Tolocation", typeof(string));
    
            var dateofjourneyParameter = dateofjourney.HasValue ?
                new ObjectParameter("Dateofjourney", dateofjourney) :
                new ObjectParameter("Dateofjourney", typeof(System.DateTime));
    
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("Mobilenumber", mobilenumber) :
                new ObjectParameter("Mobilenumber", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("Emailid", emailid) :
                new ObjectParameter("Emailid", typeof(string));
    
            var departuretimeParameter = departuretime != null ?
                new ObjectParameter("Departuretime", departuretime) :
                new ObjectParameter("Departuretime", typeof(string));
    
            var arrivaltimeParameter = arrivaltime != null ?
                new ObjectParameter("Arrivaltime", arrivaltime) :
                new ObjectParameter("Arrivaltime", typeof(string));
    
            var busnumberParameter = busnumber != null ?
                new ObjectParameter("Busnumber", busnumber) :
                new ObjectParameter("Busnumber", typeof(string));
    
            var seatnumberParameter = seatnumber != null ?
                new ObjectParameter("Seatnumber", seatnumber) :
                new ObjectParameter("Seatnumber", typeof(string));
    
            var bustypeParameter = bustype != null ?
                new ObjectParameter("Bustype", bustype) :
                new ObjectParameter("Bustype", typeof(string));
    
            var ticketfareParameter = ticketfare.HasValue ?
                new ObjectParameter("Ticketfare", ticketfare) :
                new ObjectParameter("Ticketfare", typeof(decimal));
    
            var gSTParameter = gST.HasValue ?
                new ObjectParameter("GST", gST) :
                new ObjectParameter("GST", typeof(decimal));
    
            var servicechqargeParameter = servicechqarge.HasValue ?
                new ObjectParameter("Servicechqarge", servicechqarge) :
                new ObjectParameter("Servicechqarge", typeof(decimal));
    
            var totalfareParameter = totalfare.HasValue ?
                new ObjectParameter("Totalfare", totalfare) :
                new ObjectParameter("Totalfare", typeof(decimal));
    
            var operatornameParameter = operatorname != null ?
                new ObjectParameter("Operatorname", operatorname) :
                new ObjectParameter("Operatorname", typeof(string));
    
            var operatorcntnoParameter = operatorcntno != null ?
                new ObjectParameter("Operatorcntno", operatorcntno) :
                new ObjectParameter("Operatorcntno", typeof(string));
    
            var boardingpointParameter = boardingpoint != null ?
                new ObjectParameter("Boardingpoint", boardingpoint) :
                new ObjectParameter("Boardingpoint", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var operaterPNRParameter = operaterPNR != null ?
                new ObjectParameter("OperaterPNR", operaterPNR) :
                new ObjectParameter("OperaterPNR", typeof(string));
    
            var commissionToAgentParameter = commissionToAgent.HasValue ?
                new ObjectParameter("CommissionToAgent", commissionToAgent) :
                new ObjectParameter("CommissionToAgent", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_insertupdateticketbooking", iDParameter, companyIDParameter, fromlocationParameter, tolocationParameter, dateofjourneyParameter, mobilenumberParameter, emailidParameter, departuretimeParameter, arrivaltimeParameter, busnumberParameter, seatnumberParameter, bustypeParameter, ticketfareParameter, gSTParameter, servicechqargeParameter, totalfareParameter, operatornameParameter, operatorcntnoParameter, boardingpointParameter, createdByParameter, modifiedByParameter, statusParameter, operaterPNRParameter, commissionToAgentParameter, optID, msg);
        }
    
        public virtual int USP_ManageBranch(Nullable<int> id, string branchName, Nullable<int> companyId, string companyName, string flag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ManageBranch", idParameter, branchNameParameter, companyIdParameter, companyNameParameter, flagParameter);
        }
    
        public virtual int USP_ManageCompanyModule(Nullable<int> id, Nullable<int> companyId, string companyName, Nullable<int> moduleId, string moduleName, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isHavingAccess, string flag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isHavingAccessParameter = isHavingAccess.HasValue ?
                new ObjectParameter("IsHavingAccess", isHavingAccess) :
                new ObjectParameter("IsHavingAccess", typeof(bool));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ManageCompanyModule", idParameter, companyIdParameter, companyNameParameter, moduleIdParameter, moduleNameParameter, fromDateParameter, toDateParameter, isHavingAccessParameter, flagParameter);
        }
    
        public virtual int USP_ManageExpense(Nullable<int> id, Nullable<int> expenseCategoryId, string expenseCategoryName, Nullable<System.DateTime> expenseDate, Nullable<decimal> expenseAmount, string expenseRemarks, Nullable<int> bookingRefId, Nullable<int> umrahGroupId, string typeofBooking, string expenseType, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn, Nullable<int> companyId, string companyName, Nullable<int> branchId, string branchName, string flag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var expenseCategoryIdParameter = expenseCategoryId.HasValue ?
                new ObjectParameter("ExpenseCategoryId", expenseCategoryId) :
                new ObjectParameter("ExpenseCategoryId", typeof(int));
    
            var expenseCategoryNameParameter = expenseCategoryName != null ?
                new ObjectParameter("ExpenseCategoryName", expenseCategoryName) :
                new ObjectParameter("ExpenseCategoryName", typeof(string));
    
            var expenseDateParameter = expenseDate.HasValue ?
                new ObjectParameter("ExpenseDate", expenseDate) :
                new ObjectParameter("ExpenseDate", typeof(System.DateTime));
    
            var expenseAmountParameter = expenseAmount.HasValue ?
                new ObjectParameter("ExpenseAmount", expenseAmount) :
                new ObjectParameter("ExpenseAmount", typeof(decimal));
    
            var expenseRemarksParameter = expenseRemarks != null ?
                new ObjectParameter("ExpenseRemarks", expenseRemarks) :
                new ObjectParameter("ExpenseRemarks", typeof(string));
    
            var bookingRefIdParameter = bookingRefId.HasValue ?
                new ObjectParameter("BookingRefId", bookingRefId) :
                new ObjectParameter("BookingRefId", typeof(int));
    
            var umrahGroupIdParameter = umrahGroupId.HasValue ?
                new ObjectParameter("UmrahGroupId", umrahGroupId) :
                new ObjectParameter("UmrahGroupId", typeof(int));
    
            var typeofBookingParameter = typeofBooking != null ?
                new ObjectParameter("TypeofBooking", typeofBooking) :
                new ObjectParameter("TypeofBooking", typeof(string));
    
            var expenseTypeParameter = expenseType != null ?
                new ObjectParameter("ExpenseType", expenseType) :
                new ObjectParameter("ExpenseType", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ManageExpense", idParameter, expenseCategoryIdParameter, expenseCategoryNameParameter, expenseDateParameter, expenseAmountParameter, expenseRemarksParameter, bookingRefIdParameter, umrahGroupIdParameter, typeofBookingParameter, expenseTypeParameter, isActiveParameter, createdByParameter, createdOnParameter, modifiedByParameter, modifiedOnParameter, companyIdParameter, companyNameParameter, branchIdParameter, branchNameParameter, flagParameter);
        }
    
        public virtual int USP_ManageInvoiceDetails(Nullable<int> id, Nullable<int> bookingRefNo, string typeofBooking, string subTypeofBooking, string invoiceNumber, Nullable<System.DateTime> invoiceDate, string mobileNumber, string supplierGST, string toAddress, Nullable<int> invoiceCreatedBy, Nullable<int> companyId, string companyName, Nullable<int> branchId, string branchName, string flag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var bookingRefNoParameter = bookingRefNo.HasValue ?
                new ObjectParameter("BookingRefNo", bookingRefNo) :
                new ObjectParameter("BookingRefNo", typeof(int));
    
            var typeofBookingParameter = typeofBooking != null ?
                new ObjectParameter("TypeofBooking", typeofBooking) :
                new ObjectParameter("TypeofBooking", typeof(string));
    
            var subTypeofBookingParameter = subTypeofBooking != null ?
                new ObjectParameter("SubTypeofBooking", subTypeofBooking) :
                new ObjectParameter("SubTypeofBooking", typeof(string));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var supplierGSTParameter = supplierGST != null ?
                new ObjectParameter("SupplierGST", supplierGST) :
                new ObjectParameter("SupplierGST", typeof(string));
    
            var toAddressParameter = toAddress != null ?
                new ObjectParameter("ToAddress", toAddress) :
                new ObjectParameter("ToAddress", typeof(string));
    
            var invoiceCreatedByParameter = invoiceCreatedBy.HasValue ?
                new ObjectParameter("InvoiceCreatedBy", invoiceCreatedBy) :
                new ObjectParameter("InvoiceCreatedBy", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ManageInvoiceDetails", idParameter, bookingRefNoParameter, typeofBookingParameter, subTypeofBookingParameter, invoiceNumberParameter, invoiceDateParameter, mobileNumberParameter, supplierGSTParameter, toAddressParameter, invoiceCreatedByParameter, companyIdParameter, companyNameParameter, branchIdParameter, branchNameParameter, flagParameter);
        }
    
        public virtual int USP_ManageUmrahAdvanceHistory(Nullable<int> umrahPackageId, Nullable<long> amount, string paymentMode, string bankName, string transactionId, Nullable<int> createdBy, Nullable<System.DateTime> createdOn)
        {
            var umrahPackageIdParameter = umrahPackageId.HasValue ?
                new ObjectParameter("UmrahPackageId", umrahPackageId) :
                new ObjectParameter("UmrahPackageId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(long));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ManageUmrahAdvanceHistory", umrahPackageIdParameter, amountParameter, paymentModeParameter, bankNameParameter, transactionIdParameter, createdByParameter, createdOnParameter);
        }
    
        public virtual int USP_ManageUmrahCancellationMatrix(Nullable<int> id, Nullable<int> umrahCancellationPolicyId, Nullable<int> fromDay, Nullable<int> toDay, Nullable<int> cancelPerc, string isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, string flag, ObjectParameter optId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var umrahCancellationPolicyIdParameter = umrahCancellationPolicyId.HasValue ?
                new ObjectParameter("UmrahCancellationPolicyId", umrahCancellationPolicyId) :
                new ObjectParameter("UmrahCancellationPolicyId", typeof(int));
    
            var fromDayParameter = fromDay.HasValue ?
                new ObjectParameter("FromDay", fromDay) :
                new ObjectParameter("FromDay", typeof(int));
    
            var toDayParameter = toDay.HasValue ?
                new ObjectParameter("ToDay", toDay) :
                new ObjectParameter("ToDay", typeof(int));
    
            var cancelPercParameter = cancelPerc.HasValue ?
                new ObjectParameter("CancelPerc", cancelPerc) :
                new ObjectParameter("CancelPerc", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ManageUmrahCancellationMatrix", idParameter, umrahCancellationPolicyIdParameter, fromDayParameter, toDayParameter, cancelPercParameter, isActiveParameter, createdByParameter, createdOnParameter, flagParameter, optId);
        }
    
        public virtual int USP_ManageUmrahCancellationPolicy(Nullable<int> id, Nullable<int> groupId, string groupName, Nullable<int> companyId, string companyName, Nullable<bool> isGroupCancellation, Nullable<int> minCancelPerc, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, string flag, ObjectParameter optId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var isGroupCancellationParameter = isGroupCancellation.HasValue ?
                new ObjectParameter("IsGroupCancellation", isGroupCancellation) :
                new ObjectParameter("IsGroupCancellation", typeof(bool));
    
            var minCancelPercParameter = minCancelPerc.HasValue ?
                new ObjectParameter("MinCancelPerc", minCancelPerc) :
                new ObjectParameter("MinCancelPerc", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ManageUmrahCancellationPolicy", idParameter, groupIdParameter, groupNameParameter, companyIdParameter, companyNameParameter, isGroupCancellationParameter, minCancelPercParameter, createdByParameter, createdOnParameter, flagParameter, optId);
        }
    
        public virtual int USP_ManageUmrahCancellationPolicyHistory(Nullable<int> id, Nullable<int> umrahCancellationPolicyId, Nullable<int> umrahCancellationMatrixId, string columnName, Nullable<int> oldValue, Nullable<int> newValue, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, string description, string flag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var umrahCancellationPolicyIdParameter = umrahCancellationPolicyId.HasValue ?
                new ObjectParameter("UmrahCancellationPolicyId", umrahCancellationPolicyId) :
                new ObjectParameter("UmrahCancellationPolicyId", typeof(int));
    
            var umrahCancellationMatrixIdParameter = umrahCancellationMatrixId.HasValue ?
                new ObjectParameter("UmrahCancellationMatrixId", umrahCancellationMatrixId) :
                new ObjectParameter("UmrahCancellationMatrixId", typeof(int));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            var oldValueParameter = oldValue.HasValue ?
                new ObjectParameter("OldValue", oldValue) :
                new ObjectParameter("OldValue", typeof(int));
    
            var newValueParameter = newValue.HasValue ?
                new ObjectParameter("NewValue", newValue) :
                new ObjectParameter("NewValue", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ManageUmrahCancellationPolicyHistory", idParameter, umrahCancellationPolicyIdParameter, umrahCancellationMatrixIdParameter, columnNameParameter, oldValueParameter, newValueParameter, createdByParameter, createdOnParameter, descriptionParameter, flagParameter);
        }
    
        public virtual int USP_ManageUmrahGroup(Nullable<int> id, string groupCode, string groupName, Nullable<int> availableCount, string hotelType, Nullable<int> noofDaysInMacca, string maccaHotelName, Nullable<int> noofDaysInMadeena, string madeenaHotelName, Nullable<int> totalDuration, Nullable<int> amountforAdult, Nullable<int> amountforChild, Nullable<int> amountforInfant, Nullable<int> quintQuadRoomCost, Nullable<int> tripleRoomCost, Nullable<int> twinRoomCost, string departureAirlines, Nullable<System.DateTime> departureDate, string departureTime, string departureFlightName, string returnAirlines, Nullable<System.DateTime> returnDate, string returnTime, string returnFlightName, Nullable<int> companyId, string companyName, Nullable<int> branchId, string branchName, Nullable<System.DateTime> travelStartDate, Nullable<System.DateTime> travelEndDate, Nullable<bool> isActive, Nullable<System.DateTime> outDateofMacca, Nullable<System.DateTime> inDateofMadeena, string flag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var availableCountParameter = availableCount.HasValue ?
                new ObjectParameter("AvailableCount", availableCount) :
                new ObjectParameter("AvailableCount", typeof(int));
    
            var hotelTypeParameter = hotelType != null ?
                new ObjectParameter("HotelType", hotelType) :
                new ObjectParameter("HotelType", typeof(string));
    
            var noofDaysInMaccaParameter = noofDaysInMacca.HasValue ?
                new ObjectParameter("NoofDaysInMacca", noofDaysInMacca) :
                new ObjectParameter("NoofDaysInMacca", typeof(int));
    
            var maccaHotelNameParameter = maccaHotelName != null ?
                new ObjectParameter("MaccaHotelName", maccaHotelName) :
                new ObjectParameter("MaccaHotelName", typeof(string));
    
            var noofDaysInMadeenaParameter = noofDaysInMadeena.HasValue ?
                new ObjectParameter("NoofDaysInMadeena", noofDaysInMadeena) :
                new ObjectParameter("NoofDaysInMadeena", typeof(int));
    
            var madeenaHotelNameParameter = madeenaHotelName != null ?
                new ObjectParameter("MadeenaHotelName", madeenaHotelName) :
                new ObjectParameter("MadeenaHotelName", typeof(string));
    
            var totalDurationParameter = totalDuration.HasValue ?
                new ObjectParameter("TotalDuration", totalDuration) :
                new ObjectParameter("TotalDuration", typeof(int));
    
            var amountforAdultParameter = amountforAdult.HasValue ?
                new ObjectParameter("AmountforAdult", amountforAdult) :
                new ObjectParameter("AmountforAdult", typeof(int));
    
            var amountforChildParameter = amountforChild.HasValue ?
                new ObjectParameter("AmountforChild", amountforChild) :
                new ObjectParameter("AmountforChild", typeof(int));
    
            var amountforInfantParameter = amountforInfant.HasValue ?
                new ObjectParameter("AmountforInfant", amountforInfant) :
                new ObjectParameter("AmountforInfant", typeof(int));
    
            var quintQuadRoomCostParameter = quintQuadRoomCost.HasValue ?
                new ObjectParameter("QuintQuadRoomCost", quintQuadRoomCost) :
                new ObjectParameter("QuintQuadRoomCost", typeof(int));
    
            var tripleRoomCostParameter = tripleRoomCost.HasValue ?
                new ObjectParameter("TripleRoomCost", tripleRoomCost) :
                new ObjectParameter("TripleRoomCost", typeof(int));
    
            var twinRoomCostParameter = twinRoomCost.HasValue ?
                new ObjectParameter("TwinRoomCost", twinRoomCost) :
                new ObjectParameter("TwinRoomCost", typeof(int));
    
            var departureAirlinesParameter = departureAirlines != null ?
                new ObjectParameter("DepartureAirlines", departureAirlines) :
                new ObjectParameter("DepartureAirlines", typeof(string));
    
            var departureDateParameter = departureDate.HasValue ?
                new ObjectParameter("DepartureDate", departureDate) :
                new ObjectParameter("DepartureDate", typeof(System.DateTime));
    
            var departureTimeParameter = departureTime != null ?
                new ObjectParameter("DepartureTime", departureTime) :
                new ObjectParameter("DepartureTime", typeof(string));
    
            var departureFlightNameParameter = departureFlightName != null ?
                new ObjectParameter("DepartureFlightName", departureFlightName) :
                new ObjectParameter("DepartureFlightName", typeof(string));
    
            var returnAirlinesParameter = returnAirlines != null ?
                new ObjectParameter("ReturnAirlines", returnAirlines) :
                new ObjectParameter("ReturnAirlines", typeof(string));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var returnTimeParameter = returnTime != null ?
                new ObjectParameter("ReturnTime", returnTime) :
                new ObjectParameter("ReturnTime", typeof(string));
    
            var returnFlightNameParameter = returnFlightName != null ?
                new ObjectParameter("ReturnFlightName", returnFlightName) :
                new ObjectParameter("ReturnFlightName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var travelStartDateParameter = travelStartDate.HasValue ?
                new ObjectParameter("TravelStartDate", travelStartDate) :
                new ObjectParameter("TravelStartDate", typeof(System.DateTime));
    
            var travelEndDateParameter = travelEndDate.HasValue ?
                new ObjectParameter("TravelEndDate", travelEndDate) :
                new ObjectParameter("TravelEndDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var outDateofMaccaParameter = outDateofMacca.HasValue ?
                new ObjectParameter("OutDateofMacca", outDateofMacca) :
                new ObjectParameter("OutDateofMacca", typeof(System.DateTime));
    
            var inDateofMadeenaParameter = inDateofMadeena.HasValue ?
                new ObjectParameter("InDateofMadeena", inDateofMadeena) :
                new ObjectParameter("InDateofMadeena", typeof(System.DateTime));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ManageUmrahGroup", idParameter, groupCodeParameter, groupNameParameter, availableCountParameter, hotelTypeParameter, noofDaysInMaccaParameter, maccaHotelNameParameter, noofDaysInMadeenaParameter, madeenaHotelNameParameter, totalDurationParameter, amountforAdultParameter, amountforChildParameter, amountforInfantParameter, quintQuadRoomCostParameter, tripleRoomCostParameter, twinRoomCostParameter, departureAirlinesParameter, departureDateParameter, departureTimeParameter, departureFlightNameParameter, returnAirlinesParameter, returnDateParameter, returnTimeParameter, returnFlightNameParameter, companyIdParameter, companyNameParameter, branchIdParameter, branchNameParameter, travelStartDateParameter, travelEndDateParameter, isActiveParameter, outDateofMaccaParameter, inDateofMadeenaParameter, flagParameter);
        }
    
        public virtual int USP_ManageUmrahPackage(Nullable<int> id, Nullable<int> groupId, string groupName, Nullable<System.DateTime> bookingDate, string roomType, Nullable<long> amountforAdult, Nullable<long> amountforChild, Nullable<long> amountforInfant, Nullable<int> noofAdults, Nullable<int> noofChilds, Nullable<int> noofInfants, Nullable<long> gST, Nullable<long> extraCharges, Nullable<long> totalAmount, Nullable<long> advance, Nullable<long> balance, string paymentMode, string bankName, string transactionId, Nullable<System.DateTime> travelStartDate, Nullable<System.DateTime> travelEndDate, string packageParticulars, string aadharNumber, string pANNumber, string address, Nullable<bool> isHotelRequired, string hotelType, string hotelCategory, Nullable<int> noofRooms, Nullable<int> noofDaysinMacca, string maccaHotelName, string roomNoinMacca, Nullable<System.DateTime> outDateofMacca, Nullable<int> noofDaysinMadeena, string madeenaHotelName, Nullable<System.DateTime> inDateofMadeena, string roomNoinMadeena, string placesofVisit, Nullable<bool> isFlightBookingRequired, string departureAirlines, string departureFlightNo, Nullable<System.DateTime> departureDate, string departureTime, string returnAirlines, string returnFlightNo, Nullable<System.DateTime> returnDate, string returnTime, Nullable<bool> isFoodBookingRequired, Nullable<bool> isVisaRequired, string customerDiscType, Nullable<int> customerDiscount, string subAgentName, string subAgentNumber, Nullable<int> subAgentCommission, string remarks, Nullable<int> companyId, string companyName, Nullable<int> branchId, string branchName, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> roomCharges, string emailId, Nullable<long> cancellationCharges, string cancellationRemarks, Nullable<long> refundAmount, Nullable<int> cancelledBy, string cancelledByName, Nullable<System.DateTime> cancelledOn, string status, string roomSharingType, Nullable<bool> transportationRequired, Nullable<bool> zamzamRequired, Nullable<bool> makkahLaundryRequired, Nullable<bool> madeenaLaundryRequired, Nullable<bool> makkahZiyaratRequired, Nullable<bool> madeenaZiyaratRequired, Nullable<System.DateTime> riazUlJanna, Nullable<bool> isSMSSelected, Nullable<bool> isWhatsAppSelected, string flag, ObjectParameter optId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var bookingDateParameter = bookingDate.HasValue ?
                new ObjectParameter("BookingDate", bookingDate) :
                new ObjectParameter("BookingDate", typeof(System.DateTime));
    
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var amountforAdultParameter = amountforAdult.HasValue ?
                new ObjectParameter("AmountforAdult", amountforAdult) :
                new ObjectParameter("AmountforAdult", typeof(long));
    
            var amountforChildParameter = amountforChild.HasValue ?
                new ObjectParameter("AmountforChild", amountforChild) :
                new ObjectParameter("AmountforChild", typeof(long));
    
            var amountforInfantParameter = amountforInfant.HasValue ?
                new ObjectParameter("AmountforInfant", amountforInfant) :
                new ObjectParameter("AmountforInfant", typeof(long));
    
            var noofAdultsParameter = noofAdults.HasValue ?
                new ObjectParameter("NoofAdults", noofAdults) :
                new ObjectParameter("NoofAdults", typeof(int));
    
            var noofChildsParameter = noofChilds.HasValue ?
                new ObjectParameter("NoofChilds", noofChilds) :
                new ObjectParameter("NoofChilds", typeof(int));
    
            var noofInfantsParameter = noofInfants.HasValue ?
                new ObjectParameter("NoofInfants", noofInfants) :
                new ObjectParameter("NoofInfants", typeof(int));
    
            var gSTParameter = gST.HasValue ?
                new ObjectParameter("GST", gST) :
                new ObjectParameter("GST", typeof(long));
    
            var extraChargesParameter = extraCharges.HasValue ?
                new ObjectParameter("ExtraCharges", extraCharges) :
                new ObjectParameter("ExtraCharges", typeof(long));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(long));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("Advance", advance) :
                new ObjectParameter("Advance", typeof(long));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(long));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var travelStartDateParameter = travelStartDate.HasValue ?
                new ObjectParameter("TravelStartDate", travelStartDate) :
                new ObjectParameter("TravelStartDate", typeof(System.DateTime));
    
            var travelEndDateParameter = travelEndDate.HasValue ?
                new ObjectParameter("TravelEndDate", travelEndDate) :
                new ObjectParameter("TravelEndDate", typeof(System.DateTime));
    
            var packageParticularsParameter = packageParticulars != null ?
                new ObjectParameter("PackageParticulars", packageParticulars) :
                new ObjectParameter("PackageParticulars", typeof(string));
    
            var aadharNumberParameter = aadharNumber != null ?
                new ObjectParameter("AadharNumber", aadharNumber) :
                new ObjectParameter("AadharNumber", typeof(string));
    
            var pANNumberParameter = pANNumber != null ?
                new ObjectParameter("PANNumber", pANNumber) :
                new ObjectParameter("PANNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var isHotelRequiredParameter = isHotelRequired.HasValue ?
                new ObjectParameter("IsHotelRequired", isHotelRequired) :
                new ObjectParameter("IsHotelRequired", typeof(bool));
    
            var hotelTypeParameter = hotelType != null ?
                new ObjectParameter("HotelType", hotelType) :
                new ObjectParameter("HotelType", typeof(string));
    
            var hotelCategoryParameter = hotelCategory != null ?
                new ObjectParameter("HotelCategory", hotelCategory) :
                new ObjectParameter("HotelCategory", typeof(string));
    
            var noofRoomsParameter = noofRooms.HasValue ?
                new ObjectParameter("NoofRooms", noofRooms) :
                new ObjectParameter("NoofRooms", typeof(int));
    
            var noofDaysinMaccaParameter = noofDaysinMacca.HasValue ?
                new ObjectParameter("NoofDaysinMacca", noofDaysinMacca) :
                new ObjectParameter("NoofDaysinMacca", typeof(int));
    
            var maccaHotelNameParameter = maccaHotelName != null ?
                new ObjectParameter("MaccaHotelName", maccaHotelName) :
                new ObjectParameter("MaccaHotelName", typeof(string));
    
            var roomNoinMaccaParameter = roomNoinMacca != null ?
                new ObjectParameter("RoomNoinMacca", roomNoinMacca) :
                new ObjectParameter("RoomNoinMacca", typeof(string));
    
            var outDateofMaccaParameter = outDateofMacca.HasValue ?
                new ObjectParameter("OutDateofMacca", outDateofMacca) :
                new ObjectParameter("OutDateofMacca", typeof(System.DateTime));
    
            var noofDaysinMadeenaParameter = noofDaysinMadeena.HasValue ?
                new ObjectParameter("NoofDaysinMadeena", noofDaysinMadeena) :
                new ObjectParameter("NoofDaysinMadeena", typeof(int));
    
            var madeenaHotelNameParameter = madeenaHotelName != null ?
                new ObjectParameter("MadeenaHotelName", madeenaHotelName) :
                new ObjectParameter("MadeenaHotelName", typeof(string));
    
            var inDateofMadeenaParameter = inDateofMadeena.HasValue ?
                new ObjectParameter("InDateofMadeena", inDateofMadeena) :
                new ObjectParameter("InDateofMadeena", typeof(System.DateTime));
    
            var roomNoinMadeenaParameter = roomNoinMadeena != null ?
                new ObjectParameter("RoomNoinMadeena", roomNoinMadeena) :
                new ObjectParameter("RoomNoinMadeena", typeof(string));
    
            var placesofVisitParameter = placesofVisit != null ?
                new ObjectParameter("PlacesofVisit", placesofVisit) :
                new ObjectParameter("PlacesofVisit", typeof(string));
    
            var isFlightBookingRequiredParameter = isFlightBookingRequired.HasValue ?
                new ObjectParameter("IsFlightBookingRequired", isFlightBookingRequired) :
                new ObjectParameter("IsFlightBookingRequired", typeof(bool));
    
            var departureAirlinesParameter = departureAirlines != null ?
                new ObjectParameter("DepartureAirlines", departureAirlines) :
                new ObjectParameter("DepartureAirlines", typeof(string));
    
            var departureFlightNoParameter = departureFlightNo != null ?
                new ObjectParameter("DepartureFlightNo", departureFlightNo) :
                new ObjectParameter("DepartureFlightNo", typeof(string));
    
            var departureDateParameter = departureDate.HasValue ?
                new ObjectParameter("DepartureDate", departureDate) :
                new ObjectParameter("DepartureDate", typeof(System.DateTime));
    
            var departureTimeParameter = departureTime != null ?
                new ObjectParameter("DepartureTime", departureTime) :
                new ObjectParameter("DepartureTime", typeof(string));
    
            var returnAirlinesParameter = returnAirlines != null ?
                new ObjectParameter("ReturnAirlines", returnAirlines) :
                new ObjectParameter("ReturnAirlines", typeof(string));
    
            var returnFlightNoParameter = returnFlightNo != null ?
                new ObjectParameter("ReturnFlightNo", returnFlightNo) :
                new ObjectParameter("ReturnFlightNo", typeof(string));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var returnTimeParameter = returnTime != null ?
                new ObjectParameter("ReturnTime", returnTime) :
                new ObjectParameter("ReturnTime", typeof(string));
    
            var isFoodBookingRequiredParameter = isFoodBookingRequired.HasValue ?
                new ObjectParameter("IsFoodBookingRequired", isFoodBookingRequired) :
                new ObjectParameter("IsFoodBookingRequired", typeof(bool));
    
            var isVisaRequiredParameter = isVisaRequired.HasValue ?
                new ObjectParameter("IsVisaRequired", isVisaRequired) :
                new ObjectParameter("IsVisaRequired", typeof(bool));
    
            var customerDiscTypeParameter = customerDiscType != null ?
                new ObjectParameter("CustomerDiscType", customerDiscType) :
                new ObjectParameter("CustomerDiscType", typeof(string));
    
            var customerDiscountParameter = customerDiscount.HasValue ?
                new ObjectParameter("CustomerDiscount", customerDiscount) :
                new ObjectParameter("CustomerDiscount", typeof(int));
    
            var subAgentNameParameter = subAgentName != null ?
                new ObjectParameter("SubAgentName", subAgentName) :
                new ObjectParameter("SubAgentName", typeof(string));
    
            var subAgentNumberParameter = subAgentNumber != null ?
                new ObjectParameter("SubAgentNumber", subAgentNumber) :
                new ObjectParameter("SubAgentNumber", typeof(string));
    
            var subAgentCommissionParameter = subAgentCommission.HasValue ?
                new ObjectParameter("SubAgentCommission", subAgentCommission) :
                new ObjectParameter("SubAgentCommission", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var roomChargesParameter = roomCharges.HasValue ?
                new ObjectParameter("RoomCharges", roomCharges) :
                new ObjectParameter("RoomCharges", typeof(int));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var cancellationChargesParameter = cancellationCharges.HasValue ?
                new ObjectParameter("CancellationCharges", cancellationCharges) :
                new ObjectParameter("CancellationCharges", typeof(long));
    
            var cancellationRemarksParameter = cancellationRemarks != null ?
                new ObjectParameter("CancellationRemarks", cancellationRemarks) :
                new ObjectParameter("CancellationRemarks", typeof(string));
    
            var refundAmountParameter = refundAmount.HasValue ?
                new ObjectParameter("RefundAmount", refundAmount) :
                new ObjectParameter("RefundAmount", typeof(long));
    
            var cancelledByParameter = cancelledBy.HasValue ?
                new ObjectParameter("CancelledBy", cancelledBy) :
                new ObjectParameter("CancelledBy", typeof(int));
    
            var cancelledByNameParameter = cancelledByName != null ?
                new ObjectParameter("CancelledByName", cancelledByName) :
                new ObjectParameter("CancelledByName", typeof(string));
    
            var cancelledOnParameter = cancelledOn.HasValue ?
                new ObjectParameter("CancelledOn", cancelledOn) :
                new ObjectParameter("CancelledOn", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var roomSharingTypeParameter = roomSharingType != null ?
                new ObjectParameter("RoomSharingType", roomSharingType) :
                new ObjectParameter("RoomSharingType", typeof(string));
    
            var transportationRequiredParameter = transportationRequired.HasValue ?
                new ObjectParameter("TransportationRequired", transportationRequired) :
                new ObjectParameter("TransportationRequired", typeof(bool));
    
            var zamzamRequiredParameter = zamzamRequired.HasValue ?
                new ObjectParameter("ZamzamRequired", zamzamRequired) :
                new ObjectParameter("ZamzamRequired", typeof(bool));
    
            var makkahLaundryRequiredParameter = makkahLaundryRequired.HasValue ?
                new ObjectParameter("MakkahLaundryRequired", makkahLaundryRequired) :
                new ObjectParameter("MakkahLaundryRequired", typeof(bool));
    
            var madeenaLaundryRequiredParameter = madeenaLaundryRequired.HasValue ?
                new ObjectParameter("MadeenaLaundryRequired", madeenaLaundryRequired) :
                new ObjectParameter("MadeenaLaundryRequired", typeof(bool));
    
            var makkahZiyaratRequiredParameter = makkahZiyaratRequired.HasValue ?
                new ObjectParameter("MakkahZiyaratRequired", makkahZiyaratRequired) :
                new ObjectParameter("MakkahZiyaratRequired", typeof(bool));
    
            var madeenaZiyaratRequiredParameter = madeenaZiyaratRequired.HasValue ?
                new ObjectParameter("MadeenaZiyaratRequired", madeenaZiyaratRequired) :
                new ObjectParameter("MadeenaZiyaratRequired", typeof(bool));
    
            var riazUlJannaParameter = riazUlJanna.HasValue ?
                new ObjectParameter("RiazUlJanna", riazUlJanna) :
                new ObjectParameter("RiazUlJanna", typeof(System.DateTime));
    
            var isSMSSelectedParameter = isSMSSelected.HasValue ?
                new ObjectParameter("IsSMSSelected", isSMSSelected) :
                new ObjectParameter("IsSMSSelected", typeof(bool));
    
            var isWhatsAppSelectedParameter = isWhatsAppSelected.HasValue ?
                new ObjectParameter("IsWhatsAppSelected", isWhatsAppSelected) :
                new ObjectParameter("IsWhatsAppSelected", typeof(bool));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ManageUmrahPackage", idParameter, groupIdParameter, groupNameParameter, bookingDateParameter, roomTypeParameter, amountforAdultParameter, amountforChildParameter, amountforInfantParameter, noofAdultsParameter, noofChildsParameter, noofInfantsParameter, gSTParameter, extraChargesParameter, totalAmountParameter, advanceParameter, balanceParameter, paymentModeParameter, bankNameParameter, transactionIdParameter, travelStartDateParameter, travelEndDateParameter, packageParticularsParameter, aadharNumberParameter, pANNumberParameter, addressParameter, isHotelRequiredParameter, hotelTypeParameter, hotelCategoryParameter, noofRoomsParameter, noofDaysinMaccaParameter, maccaHotelNameParameter, roomNoinMaccaParameter, outDateofMaccaParameter, noofDaysinMadeenaParameter, madeenaHotelNameParameter, inDateofMadeenaParameter, roomNoinMadeenaParameter, placesofVisitParameter, isFlightBookingRequiredParameter, departureAirlinesParameter, departureFlightNoParameter, departureDateParameter, departureTimeParameter, returnAirlinesParameter, returnFlightNoParameter, returnDateParameter, returnTimeParameter, isFoodBookingRequiredParameter, isVisaRequiredParameter, customerDiscTypeParameter, customerDiscountParameter, subAgentNameParameter, subAgentNumberParameter, subAgentCommissionParameter, remarksParameter, companyIdParameter, companyNameParameter, branchIdParameter, branchNameParameter, createdByParameter, createdOnParameter, roomChargesParameter, emailIdParameter, cancellationChargesParameter, cancellationRemarksParameter, refundAmountParameter, cancelledByParameter, cancelledByNameParameter, cancelledOnParameter, statusParameter, roomSharingTypeParameter, transportationRequiredParameter, zamzamRequiredParameter, makkahLaundryRequiredParameter, madeenaLaundryRequiredParameter, makkahZiyaratRequiredParameter, madeenaZiyaratRequiredParameter, riazUlJannaParameter, isSMSSelectedParameter, isWhatsAppSelectedParameter, flagParameter, optId);
        }
    
        public virtual int USP_ManageUmrahPassengers(Nullable<int> id, Nullable<int> umrahId, string givenName, string surName, Nullable<System.DateTime> dateofBirth, string gender, string passportNumber, Nullable<System.DateTime> passportIssueDate, Nullable<System.DateTime> passportExpiryDate, string mobileNumber, string genderFlag, string isActive, Nullable<bool> isFoodRequired, Nullable<bool> isBedRequired, Nullable<bool> isWheelChairRequired, string status, string remarks, string flag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var umrahIdParameter = umrahId.HasValue ?
                new ObjectParameter("UmrahId", umrahId) :
                new ObjectParameter("UmrahId", typeof(int));
    
            var givenNameParameter = givenName != null ?
                new ObjectParameter("GivenName", givenName) :
                new ObjectParameter("GivenName", typeof(string));
    
            var surNameParameter = surName != null ?
                new ObjectParameter("SurName", surName) :
                new ObjectParameter("SurName", typeof(string));
    
            var dateofBirthParameter = dateofBirth.HasValue ?
                new ObjectParameter("DateofBirth", dateofBirth) :
                new ObjectParameter("DateofBirth", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var passportIssueDateParameter = passportIssueDate.HasValue ?
                new ObjectParameter("PassportIssueDate", passportIssueDate) :
                new ObjectParameter("PassportIssueDate", typeof(System.DateTime));
    
            var passportExpiryDateParameter = passportExpiryDate.HasValue ?
                new ObjectParameter("PassportExpiryDate", passportExpiryDate) :
                new ObjectParameter("PassportExpiryDate", typeof(System.DateTime));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var genderFlagParameter = genderFlag != null ?
                new ObjectParameter("GenderFlag", genderFlag) :
                new ObjectParameter("GenderFlag", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var isFoodRequiredParameter = isFoodRequired.HasValue ?
                new ObjectParameter("IsFoodRequired", isFoodRequired) :
                new ObjectParameter("IsFoodRequired", typeof(bool));
    
            var isBedRequiredParameter = isBedRequired.HasValue ?
                new ObjectParameter("IsBedRequired", isBedRequired) :
                new ObjectParameter("IsBedRequired", typeof(bool));
    
            var isWheelChairRequiredParameter = isWheelChairRequired.HasValue ?
                new ObjectParameter("IsWheelChairRequired", isWheelChairRequired) :
                new ObjectParameter("IsWheelChairRequired", typeof(bool));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ManageUmrahPassengers", idParameter, umrahIdParameter, givenNameParameter, surNameParameter, dateofBirthParameter, genderParameter, passportNumberParameter, passportIssueDateParameter, passportExpiryDateParameter, mobileNumberParameter, genderFlagParameter, isActiveParameter, isFoodRequiredParameter, isBedRequiredParameter, isWheelChairRequiredParameter, statusParameter, remarksParameter, flagParameter);
        }
    
        public virtual int USP_ManageUser(Nullable<int> id, string name, string emailId, string mobileNumber, string password, Nullable<int> companyId, string companyName, Nullable<int> branchId, string branchName, Nullable<int> createdBy, Nullable<int> roleId, string roleName, Nullable<bool> isActive, string flag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ManageUser", idParameter, nameParameter, emailIdParameter, mobileNumberParameter, passwordParameter, companyIdParameter, companyNameParameter, branchIdParameter, branchNameParameter, createdByParameter, roleIdParameter, roleNameParameter, isActiveParameter, flagParameter);
        }
    
        public virtual int USP_ManageUserModuleAccess(Nullable<int> id, Nullable<int> userId, string userName, Nullable<int> moduleId, Nullable<bool> isHavingAccess, Nullable<int> companyId, Nullable<int> branchId, string flag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var isHavingAccessParameter = isHavingAccess.HasValue ?
                new ObjectParameter("IsHavingAccess", isHavingAccess) :
                new ObjectParameter("IsHavingAccess", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ManageUserModuleAccess", idParameter, userIdParameter, userNameParameter, moduleIdParameter, isHavingAccessParameter, companyIdParameter, branchIdParameter, flagParameter);
        }
    
        public virtual int USP_ManageUserRoleMap(Nullable<int> id, Nullable<int> userId, string userName, Nullable<int> roleId, string roleName, Nullable<int> companyId, Nullable<int> branchId, string flag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ManageUserRoleMap", idParameter, userIdParameter, userNameParameter, roleIdParameter, roleNameParameter, companyIdParameter, branchIdParameter, flagParameter);
        }
    
        public virtual int USP_Packagebookingdomestic(Nullable<long> pBDID, Nullable<long> companyId, string custmername, string mobilenumber, string iDProof, string address, Nullable<System.DateTime> startingdate, Nullable<System.DateTime> endingdate, string sightseeingby, Nullable<long> numberofadults, Nullable<long> numberofchildren, string hotelRequired, string hotel, string hotelType, string roomtype, Nullable<long> noofrooms, string paclageparticulars, string startingtime, string endingtime, Nullable<decimal> amountforadults, Nullable<decimal> amountforchildren, Nullable<decimal> amount, Nullable<decimal> gst, Nullable<decimal> servicecharges, Nullable<decimal> advance, Nullable<decimal> balance, string createdBy, string modifiedBy, Nullable<System.DateTime> createddate, Nullable<System.DateTime> modifieddate, Nullable<bool> status, string idProofNumber, string remarks, string startingMinutes, string endingMinutes, Nullable<decimal> totalAmount, ObjectParameter optID, ObjectParameter msg)
        {
            var pBDIDParameter = pBDID.HasValue ?
                new ObjectParameter("PBDID", pBDID) :
                new ObjectParameter("PBDID", typeof(long));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var custmernameParameter = custmername != null ?
                new ObjectParameter("Custmername", custmername) :
                new ObjectParameter("Custmername", typeof(string));
    
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("Mobilenumber", mobilenumber) :
                new ObjectParameter("Mobilenumber", typeof(string));
    
            var iDProofParameter = iDProof != null ?
                new ObjectParameter("IDProof", iDProof) :
                new ObjectParameter("IDProof", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var startingdateParameter = startingdate.HasValue ?
                new ObjectParameter("Startingdate", startingdate) :
                new ObjectParameter("Startingdate", typeof(System.DateTime));
    
            var endingdateParameter = endingdate.HasValue ?
                new ObjectParameter("Endingdate", endingdate) :
                new ObjectParameter("Endingdate", typeof(System.DateTime));
    
            var sightseeingbyParameter = sightseeingby != null ?
                new ObjectParameter("Sightseeingby", sightseeingby) :
                new ObjectParameter("Sightseeingby", typeof(string));
    
            var numberofadultsParameter = numberofadults.HasValue ?
                new ObjectParameter("Numberofadults", numberofadults) :
                new ObjectParameter("Numberofadults", typeof(long));
    
            var numberofchildrenParameter = numberofchildren.HasValue ?
                new ObjectParameter("numberofchildren", numberofchildren) :
                new ObjectParameter("numberofchildren", typeof(long));
    
            var hotelRequiredParameter = hotelRequired != null ?
                new ObjectParameter("HotelRequired", hotelRequired) :
                new ObjectParameter("HotelRequired", typeof(string));
    
            var hotelParameter = hotel != null ?
                new ObjectParameter("Hotel", hotel) :
                new ObjectParameter("Hotel", typeof(string));
    
            var hotelTypeParameter = hotelType != null ?
                new ObjectParameter("HotelType", hotelType) :
                new ObjectParameter("HotelType", typeof(string));
    
            var roomtypeParameter = roomtype != null ?
                new ObjectParameter("Roomtype", roomtype) :
                new ObjectParameter("Roomtype", typeof(string));
    
            var noofroomsParameter = noofrooms.HasValue ?
                new ObjectParameter("Noofrooms", noofrooms) :
                new ObjectParameter("Noofrooms", typeof(long));
    
            var paclageparticularsParameter = paclageparticulars != null ?
                new ObjectParameter("Paclageparticulars", paclageparticulars) :
                new ObjectParameter("Paclageparticulars", typeof(string));
    
            var startingtimeParameter = startingtime != null ?
                new ObjectParameter("Startingtime", startingtime) :
                new ObjectParameter("Startingtime", typeof(string));
    
            var endingtimeParameter = endingtime != null ?
                new ObjectParameter("Endingtime", endingtime) :
                new ObjectParameter("Endingtime", typeof(string));
    
            var amountforadultsParameter = amountforadults.HasValue ?
                new ObjectParameter("Amountforadults", amountforadults) :
                new ObjectParameter("Amountforadults", typeof(decimal));
    
            var amountforchildrenParameter = amountforchildren.HasValue ?
                new ObjectParameter("Amountforchildren", amountforchildren) :
                new ObjectParameter("Amountforchildren", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var gstParameter = gst.HasValue ?
                new ObjectParameter("Gst", gst) :
                new ObjectParameter("Gst", typeof(decimal));
    
            var servicechargesParameter = servicecharges.HasValue ?
                new ObjectParameter("Servicecharges", servicecharges) :
                new ObjectParameter("Servicecharges", typeof(decimal));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("Advance", advance) :
                new ObjectParameter("Advance", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("Modifieddate", modifieddate) :
                new ObjectParameter("Modifieddate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var idProofNumberParameter = idProofNumber != null ?
                new ObjectParameter("IdProofNumber", idProofNumber) :
                new ObjectParameter("IdProofNumber", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var startingMinutesParameter = startingMinutes != null ?
                new ObjectParameter("StartingMinutes", startingMinutes) :
                new ObjectParameter("StartingMinutes", typeof(string));
    
            var endingMinutesParameter = endingMinutes != null ?
                new ObjectParameter("EndingMinutes", endingMinutes) :
                new ObjectParameter("EndingMinutes", typeof(string));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Packagebookingdomestic", pBDIDParameter, companyIdParameter, custmernameParameter, mobilenumberParameter, iDProofParameter, addressParameter, startingdateParameter, endingdateParameter, sightseeingbyParameter, numberofadultsParameter, numberofchildrenParameter, hotelRequiredParameter, hotelParameter, hotelTypeParameter, roomtypeParameter, noofroomsParameter, paclageparticularsParameter, startingtimeParameter, endingtimeParameter, amountforadultsParameter, amountforchildrenParameter, amountParameter, gstParameter, servicechargesParameter, advanceParameter, balanceParameter, createdByParameter, modifiedByParameter, createddateParameter, modifieddateParameter, statusParameter, idProofNumberParameter, remarksParameter, startingMinutesParameter, endingMinutesParameter, totalAmountParameter, optID, msg);
        }
    
        public virtual int USP_Packagebookinginternational(Nullable<long> pBIID, Nullable<long> companyId, string custmername, string mobilenumber, string idproof, string address, Nullable<System.DateTime> startingdate, Nullable<System.DateTime> endingdate, string sightseeingby, Nullable<long> noofadults, Nullable<long> noofchildren, string hotelrequired, string hoteltype, string roomtype, Nullable<long> noofrooms, string packageparticulars, string startingtime, string endingtime, Nullable<decimal> amountforadults, Nullable<decimal> amountforchildren, Nullable<decimal> amount, Nullable<decimal> gST, Nullable<decimal> servicecharge, Nullable<decimal> advance, Nullable<decimal> balance, string createdBy, string modifiedBy, string idProofNumber, string remarks, string startingMinutes, string endingMinutes, Nullable<decimal> totalAmount, string hotel, ObjectParameter optID, ObjectParameter msg)
        {
            var pBIIDParameter = pBIID.HasValue ?
                new ObjectParameter("PBIID", pBIID) :
                new ObjectParameter("PBIID", typeof(long));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(long));
    
            var custmernameParameter = custmername != null ?
                new ObjectParameter("Custmername", custmername) :
                new ObjectParameter("Custmername", typeof(string));
    
            var mobilenumberParameter = mobilenumber != null ?
                new ObjectParameter("Mobilenumber", mobilenumber) :
                new ObjectParameter("Mobilenumber", typeof(string));
    
            var idproofParameter = idproof != null ?
                new ObjectParameter("Idproof", idproof) :
                new ObjectParameter("Idproof", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var startingdateParameter = startingdate.HasValue ?
                new ObjectParameter("Startingdate", startingdate) :
                new ObjectParameter("Startingdate", typeof(System.DateTime));
    
            var endingdateParameter = endingdate.HasValue ?
                new ObjectParameter("Endingdate", endingdate) :
                new ObjectParameter("Endingdate", typeof(System.DateTime));
    
            var sightseeingbyParameter = sightseeingby != null ?
                new ObjectParameter("Sightseeingby", sightseeingby) :
                new ObjectParameter("Sightseeingby", typeof(string));
    
            var noofadultsParameter = noofadults.HasValue ?
                new ObjectParameter("Noofadults", noofadults) :
                new ObjectParameter("Noofadults", typeof(long));
    
            var noofchildrenParameter = noofchildren.HasValue ?
                new ObjectParameter("Noofchildren", noofchildren) :
                new ObjectParameter("Noofchildren", typeof(long));
    
            var hotelrequiredParameter = hotelrequired != null ?
                new ObjectParameter("Hotelrequired", hotelrequired) :
                new ObjectParameter("Hotelrequired", typeof(string));
    
            var hoteltypeParameter = hoteltype != null ?
                new ObjectParameter("Hoteltype", hoteltype) :
                new ObjectParameter("Hoteltype", typeof(string));
    
            var roomtypeParameter = roomtype != null ?
                new ObjectParameter("Roomtype", roomtype) :
                new ObjectParameter("Roomtype", typeof(string));
    
            var noofroomsParameter = noofrooms.HasValue ?
                new ObjectParameter("Noofrooms", noofrooms) :
                new ObjectParameter("Noofrooms", typeof(long));
    
            var packageparticularsParameter = packageparticulars != null ?
                new ObjectParameter("Packageparticulars", packageparticulars) :
                new ObjectParameter("Packageparticulars", typeof(string));
    
            var startingtimeParameter = startingtime != null ?
                new ObjectParameter("Startingtime", startingtime) :
                new ObjectParameter("Startingtime", typeof(string));
    
            var endingtimeParameter = endingtime != null ?
                new ObjectParameter("Endingtime", endingtime) :
                new ObjectParameter("Endingtime", typeof(string));
    
            var amountforadultsParameter = amountforadults.HasValue ?
                new ObjectParameter("Amountforadults", amountforadults) :
                new ObjectParameter("Amountforadults", typeof(decimal));
    
            var amountforchildrenParameter = amountforchildren.HasValue ?
                new ObjectParameter("Amountforchildren", amountforchildren) :
                new ObjectParameter("Amountforchildren", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var gSTParameter = gST.HasValue ?
                new ObjectParameter("GST", gST) :
                new ObjectParameter("GST", typeof(decimal));
    
            var servicechargeParameter = servicecharge.HasValue ?
                new ObjectParameter("Servicecharge", servicecharge) :
                new ObjectParameter("Servicecharge", typeof(decimal));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("Advance", advance) :
                new ObjectParameter("Advance", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var idProofNumberParameter = idProofNumber != null ?
                new ObjectParameter("IdProofNumber", idProofNumber) :
                new ObjectParameter("IdProofNumber", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var startingMinutesParameter = startingMinutes != null ?
                new ObjectParameter("StartingMinutes", startingMinutes) :
                new ObjectParameter("StartingMinutes", typeof(string));
    
            var endingMinutesParameter = endingMinutes != null ?
                new ObjectParameter("EndingMinutes", endingMinutes) :
                new ObjectParameter("EndingMinutes", typeof(string));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var hotelParameter = hotel != null ?
                new ObjectParameter("Hotel", hotel) :
                new ObjectParameter("Hotel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Packagebookinginternational", pBIIDParameter, companyIdParameter, custmernameParameter, mobilenumberParameter, idproofParameter, addressParameter, startingdateParameter, endingdateParameter, sightseeingbyParameter, noofadultsParameter, noofchildrenParameter, hotelrequiredParameter, hoteltypeParameter, roomtypeParameter, noofroomsParameter, packageparticularsParameter, startingtimeParameter, endingtimeParameter, amountforadultsParameter, amountforchildrenParameter, amountParameter, gSTParameter, servicechargeParameter, advanceParameter, balanceParameter, createdByParameter, modifiedByParameter, idProofNumberParameter, remarksParameter, startingMinutesParameter, endingMinutesParameter, totalAmountParameter, hotelParameter, optID, msg);
        }
    
        public virtual int USP_SaveActivityLog(Nullable<int> userId, string userName, string companyName, string activityCategory, string description)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var activityCategoryParameter = activityCategory != null ?
                new ObjectParameter("ActivityCategory", activityCategory) :
                new ObjectParameter("ActivityCategory", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SaveActivityLog", userIdParameter, userNameParameter, companyNameParameter, activityCategoryParameter, descriptionParameter);
        }
    
        public virtual int USP_SaveNotificationHistory(string notificationCategory, Nullable<int> bookingRefNo, string notificationType, Nullable<System.DateTime> deliveredOn, string customerName, Nullable<int> companyId, string companyName, string transactionCharge, string balanceAmount, string customerMobileNumber)
        {
            var notificationCategoryParameter = notificationCategory != null ?
                new ObjectParameter("NotificationCategory", notificationCategory) :
                new ObjectParameter("NotificationCategory", typeof(string));
    
            var bookingRefNoParameter = bookingRefNo.HasValue ?
                new ObjectParameter("BookingRefNo", bookingRefNo) :
                new ObjectParameter("BookingRefNo", typeof(int));
    
            var notificationTypeParameter = notificationType != null ?
                new ObjectParameter("NotificationType", notificationType) :
                new ObjectParameter("NotificationType", typeof(string));
    
            var deliveredOnParameter = deliveredOn.HasValue ?
                new ObjectParameter("DeliveredOn", deliveredOn) :
                new ObjectParameter("DeliveredOn", typeof(System.DateTime));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var transactionChargeParameter = transactionCharge != null ?
                new ObjectParameter("TransactionCharge", transactionCharge) :
                new ObjectParameter("TransactionCharge", typeof(string));
    
            var balanceAmountParameter = balanceAmount != null ?
                new ObjectParameter("BalanceAmount", balanceAmount) :
                new ObjectParameter("BalanceAmount", typeof(string));
    
            var customerMobileNumberParameter = customerMobileNumber != null ?
                new ObjectParameter("CustomerMobileNumber", customerMobileNumber) :
                new ObjectParameter("CustomerMobileNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SaveNotificationHistory", notificationCategoryParameter, bookingRefNoParameter, notificationTypeParameter, deliveredOnParameter, customerNameParameter, companyIdParameter, companyNameParameter, transactionChargeParameter, balanceAmountParameter, customerMobileNumberParameter);
        }
    
        public virtual int USP_UpdateUserSMSRecharge(Nullable<int> companyId, Nullable<decimal> amount, string notificationCategory)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var notificationCategoryParameter = notificationCategory != null ?
                new ObjectParameter("NotificationCategory", notificationCategory) :
                new ObjectParameter("NotificationCategory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateUserSMSRecharge", companyIdParameter, amountParameter, notificationCategoryParameter);
        }
    
        public virtual int USP_UserRoleMap(Nullable<int> id, Nullable<int> userId, string userName, Nullable<int> roleId, string roleName, Nullable<int> companyId, Nullable<int> branchId, string flag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UserRoleMap", idParameter, userIdParameter, userNameParameter, roleIdParameter, roleNameParameter, companyIdParameter, branchIdParameter, flagParameter);
        }
    }
}
